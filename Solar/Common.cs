using System;
using System.Data;
using System.Globalization;
using System.Linq;

namespace GCSOLAR
{
    /// <summary>
    /// This class contains parameters and methods that are shared among different classes.
    /// </summary>
    public class Common
    {
        public double musubr = 1.34;
        public double dinit = 0.001;
        public double dinc = 10.0;
        public double dfinal = 5.0;
        public double deltaz = 0.001;
        public bool useDeltaz = false;
        public double elevation = 0.0;

        public int minwav = 8;
        public int maxwav = 19;
        public int ilow = 8;
        public int iup = 19;

        public int iatmos = 1;
        public int iscal = 1;
        public int iwlam = 0;
        public int izlam = 1;
        public int mid = 0;
        public int iben = 0;
        public int ivis = 0;
        public int itime = 0;
        public int iplot = 0;
        public int ityp = 0;
        public int ikalam = 0;

        public const int iunit = 9;
        public const int iprt = 8;
        public const int ittyin = 5;
        public const int ittyot = 6;
        public const int irio = 2;
        public const int iplt = 1;
        public const int isol = 3;
        public const int inew = 4;
        public const int ihsn = 7;

        public double q = 0.32;
        public double aveozo = 0.3;
        public double xlon = 83.2;
        public double typlat = 40.0;
        public int ioz = 1;
        public string asa = "1";

        public int ilatsw = 1;
        public double[] ilattm = new double[10] { 40.0, -99.0, -99.0, -99.0, -99.0, -99.0, -99.0, -99.0, -99.0, -99.0 };
        public double[] xx = new double[9] { 23.0, 26.0, 24.1, 5.0, 58.0, 53.26, 17.0, 57.0, 16.047 };

        public int iseasw = 1;
        public string[] sease = new string[4] { "Spring", "  ", "  ", "  " };

        public string wavelengthName = "Wavelength (nm)";
        public string waterNameUnits = "Water Attenuation Coefficients (m**-1)";
        public string contaminantName = "Methoxyclor";
        public string contaminantType = "Chemical";
        public string contaminantUnits = "Absorption Coefficients (L/(mole cm))";
        public string bodyWaterType = "Pure Water";
        public string bodyWaterName = "Pure Water";
        public string typeAtmos = "Terrestrial";

        /// <summary>
        /// Pure water absorption coefficients.
        /// </summary>
        /// <returns></returns>
        private double[] abwat = new double[46] { 0.00120, 0.00113, 0.00106, 0.00099, 0.00093, 0.00085,
                                                         0.00077, 0.00069, 0.00061, 0.00057, 0.00053, 0.00049,
                                                         0.00045, 0.00043, 0.00041, 0.00039, 0.00037, 0.00035,
                                                         0.00029, 0.00024, 0.00020, 0.00016, 0.00013, .000096,
                                                         0.000083, 0.000074, 0.000070, 0.000066, 0.000062, 0.000062,
                                                         0.000062, 0.000068, 0.000068, 0.000076, 0.000085, 0.00012,
                                                         0.00021, 0.00028, 0.00041, 0.00100, 0.00140, 0.00150,
                                                         0.00190, 0.00280, 0.01000, 0.00890 };
        public double[] getAbwat()
        {
            return abwat;
        }

        public void setAbwat(double value, int i)
        {
            abwat[i] = value;
        }

        private double[] pureWaterAbs = new double[46] { 0.00120, 0.00113, 0.00106, 0.00099, 0.00093, 0.00085,
                                                                0.00077, 0.00069, 0.00061, 0.00057, 0.00053, 0.00049,
                                                                0.00045, 0.00043, 0.00041, 0.00039, 0.00037, 0.00035,
                                                                0.00029, 0.00024, 0.00020, 0.00016, 0.00013, .000096,
                                                                0.000083, 0.000074, 0.000070, 0.000066, 0.000062, 0.000062,
                                                                0.000062, 0.000068, 0.000068, 0.000076, 0.000085, 0.00012,
                                                                0.00021, 0.00028, 0.00041, 0.00100, 0.00140, 0.00150,
                                                                0.00190, 0.00280, 0.01000, 0.00890 };

        public double[] getPureWaterAbs()
        {
            return pureWaterAbs;
        }

        /// <summary>
        /// Contaminant absorption coefficients.
        /// </summary>
        private double[] eppest = new double[46] { 2200.0, 2020.0, 1530.0, 642.0, 271.0, 102.0, 28.0,
                                                          11.1, 4.67, 1.9, 1.1, 0.8, 0.53, 0.33, 0.27, 0.16,
                                                          0.1, 0.06, 0.02, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                          0.0, 0.0, 0.0 };
        public double[] getEppest()
        {
            return eppest;
        }

        public void setEppest(double value, int i)
        {
            eppest[i] = value;
        }

        /// <summary>
        /// Biological absorption values.
        /// </summary>
        private double[] absBiological = new double[46] { 2200.0, 2020.0, 1530.0, 642.0, 271.0, 102.0, 28.0,
                                                                 11.1, 4.67, 1.9, 1.1, 0.8, 0.53, 0.33, 0.27, 0.16,
                                                                 0.1, 0.06, 0.02, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                                 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                                 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                                                 0.0, 0.0, 0.0 };
        public double[] getAbsBiological()
        {
            return absBiological;
        }

        public void setAbsBiological(double value, int i)
        {
            absBiological[i] = value;
        }

        /// <summary>
        /// Wavelengths in nm.
        /// </summary>
        /// <returns></returns>
        public double[] getWave()
        {
            double[] wave = new double[46] { 280.0, 282.5, 285.0, 287.5, 290.0, 292.5, 295.0,
                                             297.5, 300.0, 302.5, 305.0, 307.5, 310.0, 312.5,
                                             315.0, 317.5, 320.0, 323.1, 330.0, 340.0, 350.0,
                                             360.0, 370.0, 380.0, 390.0, 400.0, 410.0, 420.0,
                                             430.0, 440.0, 450.0, 460.0, 470.0, 480.0, 490.0,
                                             500.0, 525.0, 550.0, 575.0, 600.0, 625.0, 650.0,
                                             675.0, 700.0, 750.0, 800.0 };

            return wave;
        }

        public double getMinWave(int minwav)
        {
            double[] waveLengths = getWave();
            double minwave = waveLengths[minwav - 1];
            return minwave;
        }

        public double getMaxWave(int maxwav)
        {
            double[] waveLengths = getWave();
            double maxwave = waveLengths[maxwav - 1];
            return maxwave;
        }

        public void setMinWave(double wave)
        {
            if (wave != 0)
            {
                double[] waves = this.getWave();
                int iMax = waves.Count() - 1;
                for (int i = 1; i <= iMax; i++)
                {
                    double t1 = waves[i];
                    if (Math.Abs(wave) - waves[i - 1] < 0.001)
                    {
                        this.minwav = i;
                        break;
                    }
                }
            }
        }

        public void setMaxWave(double wave)
        {
            if (wave != 0)
            {
                double[] waves = this.getWave();
                int iMax = waves.Count();
                for (int i = 1; i <= iMax; i++)
                {
                    if (Math.Abs(wave) - waves[i - 1] < 0.001)
                    {
                        this.maxwav = i;
                        break;
                    }
                }
            }
        }

        public double[,] getDefdec()
        {
            double[,] defdec = new double[3, 4] { {10.0, 20.0,- 9.0, -20.0},
                                                 {5.0, 5.0, 56.0, 8.0},
                                                 {23.6, 40.4, 40.4, 15.2} };
            return defdec;
        }

        public double[,] getDefrgt()
        {
            double[,] defrgt = new double[3, 4] { {1.0, 8.0, 13.0, 20.0},
                                                 {36.0, 9.0, 35.0, 9.0},
                                                 {55.38, 49.92, 24.52, 0.14} };
            return defrgt;
        }

        public double[,] getDefsid()
        {
            double[,] defsid = new double[3, 4] { {13.0, 20.0, 1.0, 7.0},
                                                 {37.0, 3.0, 50.0, 57.0},
                                                 {3.41, 25.884, 22.564, 59.844} };
            return defsid;
        }

        public double[,] getDefoza()
        {
            double[,] defoza = new double[10, 4] { {0.26, 0.256, 0.244, 0.241 },
                                                  {0.268, 0.261, 0.253, 0.247},
                                                  {0.287, 0.273, 0.261, 0.26},
                                                  {0.313, 0.292, 0.27, 0.284},
                                                  {0.352, 0.314, 0.281, 0.318},
                                                  {0.395, 0.333, 0.299, 0.357},
                                                  {0.419, 0.346, 0.308, 0.373},
                                                  {0.43, 0.349, 0.307, 0.37},
                                                  {0.435, 0.347, 0.299, 0.364},
                                                  {0.436, 0.339, 0.29, 0.361} };
            return defoza;
        }

        public double[] getWeight()
        {
            double[] weight = new double[46] { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                                               1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                                               1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                                               1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                                               2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5,
                                               5.0, 5.0 };
            return weight;
        }

        public double[] getWgt()
        {
            double[] wgt = new double[46] { 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5,
                                            2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 3.75,
                                            10.0, 10.0, 10.0, 10.0, 10.0, 10.0,
                                            10.0, 10.0, 10.0, 10.0, 10.0, 10.0,
                                            10.0, 10.0, 10.0, 10.0, 10.0, 10.0,
                                            25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0,
                                            50.0, 50.0 };
            return wgt;
        }

        /// <summary>
        /// Sky intensities from the whole sky on a horizontal surface.
        /// </summary>
        /// <returns></returns>
        public double[,,] getH()
        {
            double[,,] H = new double[22, 10, 4] {
                                                   { { 0.544895E+15, 0.531302E+15, 0.544895E+15, 0.531302E+15},
                                                   { 0.541202E+15, 0.544895E+15, 0.531302E+15, 0.524422E+15},
                                                   { 0.544895E+15, 0.541202E+15, 0.524422E+15, 0.494635E+15},
                                                   { 0.531302E+15, 0.544895E+15, 0.494635E+15, 0.469846E+15},
                                                   { 0.524422E+15, 0.531302E+15, 0.469846E+15, 0.408101E+15},
                                                   { 0.494635E+15, 0.524422E+15, 0.408101E+15, 0.323552E+15},
                                                   { 0.469846E+15, 0.494635E+15, 0.323552E+15, 0.186812E+15},
                                                   { 0.408101E+15, 0.469846E+15, 0.186812E+15, 0.000000E+00},
                                                   { 0.323552E+15, 0.408101E+15, 0.000000E+00, 0.000000E+00},
                                                   { 0.186812E+15, 0.323552E+15, 0.000000E+00, 0.000000E+00}
                                                   },

                                                   { { 0.726592E+15, 0.707870E+15, 0.726592E+15, 0.707870E+15},
                                                   { 0.722302E+15, 0.726592E+15, 0.707870E+15, 0.700701E+15},
                                                   { 0.726592E+15, 0.722302E+15, 0.700701E+15, 0.662552E+15},
                                                   { 0.707870E+15, 0.726592E+15, 0.662552E+15, 0.633661E+15},
                                                   { 0.700701E+15, 0.707870E+15, 0.633661E+15, 0.553351E+15},
                                                   { 0.662552E+15, 0.700701E+15, 0.553351E+15, 0.446371E+15},
                                                   { 0.633661E+15, 0.662552E+15, 0.446371E+15, 0.261081E+15},
                                                   { 0.553351E+15, 0.633661E+15, 0.261081E+15, 0.000000E+00},
                                                   { 0.446371E+15, 0.553351E+15, 0.000000E+00, 0.000000E+00},
                                                   { 0.261081E+15, 0.446371E+15, 0.000000E+00, 0.000000E+00}
                                                   },

                                                   { { 0.892492E+15, 0.870447E+15, 0.892492E+15, 0.870447E+15},
                                                     { 0.886213E+15, 0.892492E+15, 0.870447E+15, 0.862981E+15},
                                                     { 0.892492E+15, 0.886213E+15, 0.862981E+15, 0.817109E+15},
                                                     { 0.870447E+15, 0.892492E+15, 0.817109E+15, 0.786162E+15},
                                                     { 0.862981E+15, 0.870447E+15, 0.786162E+15, 0.689721E+15},
                                                     { 0.817109E+15, 0.862981E+15, 0.689721E+15, 0.565745E+15},
                                                     { 0.786162E+15, 0.817109E+15, 0.565745E+15, 0.334936E+15},
                                                     { 0.689721E+15, 0.786162E+15, 0.334936E+15, 0.000000E+00},
                                                     { 0.565745E+15, 0.689721E+15, 0.000000E+00, 0.000000E+00},
                                                     { 0.334936E+15, 0.565745E+15, 0.000000E+00, 0.000000E+00}
                                                   },

                                                    { { 0.859639E+15, 0.839333E+15, 0.859639E+15, 0.839333E+15},
                                                    { 0.852603E+15, 0.859639E+15, 0.839333E+15, 0.834186E+15},
                                                    { 0.859639E+15, 0.852603E+15, 0.834186E+15, 0.791531E+15},
                                                    { 0.839333E+15, 0.859639E+15, 0.791531E+15, 0.765300E+15},
                                                    { 0.834186E+15, 0.839333E+15, 0.765300E+15, 0.673961E+15},
                                                    { 0.791531E+15, 0.834186E+15, 0.673961E+15, 0.561344E+15},
                                                    { 0.765300E+15, 0.791531E+15, 0.561344E+15, 0.335940E+15},
                                                    { 0.673961E+15, 0.765300E+15, 0.335940E+15, 0.000000E+00},
                                                    { 0.561344E+15, 0.673961E+15, 0.000000E+00, 0.000000E+00},
                                                    { 0.335940E+15, 0.561344E+15, 0.000000E+00, 0.000000E+00}
                                                    },

                                                    { { 0.777378E+15, 0.759901E+15, 0.777378E+15, 0.759901E+15},
                                                    { 0.770073E+15, 0.777378E+15, 0.759901E+15, 0.757157E+15},
                                                    { 0.777378E+15, 0.770073E+15, 0.757157E+15, 0.720013E+15},
                                                    { 0.759901E+15, 0.777378E+15, 0.720013E+15, 0.699068E+15},
                                                    { 0.757157E+15, 0.759901E+15, 0.699068E+15, 0.617601E+15},
                                                    { 0.720013E+15, 0.757157E+15, 0.617601E+15, 0.522469E+15},
                                                    { 0.699068E+15, 0.720013E+15, 0.522469E+15, 0.316040E+15},
                                                    { 0.617601E+15, 0.699068E+15, 0.316040E+15, 0.000000E+00},
                                                    { 0.522469E+15, 0.617601E+15, 0.000000E+00, 0.000000E+00},
                                                    { 0.316040E+15, 0.522469E+15, 0.000000E+00, 0.000000E+00}
                                                    },


                                                    { { 0.863061E+15, 0.843609E+15, 0.863061E+15, 0.843609E+15},
                                                    { 0.855003E+15, 0.863061E+15, 0.843609E+15, 0.841777E+15},
                                                    { 0.863061E+15, 0.855003E+15, 0.841777E+15, 0.801474E+15},
                                                    { 0.843609E+15, 0.863061E+15, 0.801474E+15, 0.781711E+15},
                                                    { 0.841777E+15, 0.843609E+15, 0.781711E+15, 0.693001E+15},
                                                    { 0.801474E+15, 0.841777E+15, 0.693001E+15, 0.595630E+15},
                                                    { 0.781711E+15, 0.801474E+15, 0.595630E+15, 0.364142E+15},
                                                    { 0.693001E+15, 0.781711E+15, 0.364142E+15, 0.000000E+00},
                                                    { 0.595630E+15, 0.693001E+15, 0.000000E+00, 0.000000E+00},
                                                    { 0.364142E+15, 0.595630E+15, 0.000000E+00, 0.000000E+00}
                                                    },

                                                    { { 0.917103E+15, 0.897407E+15, 0.917103E+15, 0.897407E+15},
                                                    { 0.907503E+15, 0.917103E+15, 0.897407E+15, 0.895254E+15},
                                                    { 0.917103E+15, 0.907503E+15, 0.895254E+15, 0.852225E+15},
                                                    { 0.897407E+15, 0.917103E+15, 0.852225E+15, 0.834821E+15},
                                                    { 0.895254E+15, 0.897407E+15, 0.834821E+15, 0.742501E+15},
                                                    { 0.852225E+15, 0.895254E+15, 0.742501E+15, 0.647702E+15},
                                                    { 0.834821E+15, 0.852225E+15, 0.647702E+15, 0.399827E+15},
                                                    { 0.742501E+15, 0.834821E+15, 0.399827E+15, 0.000000E+00},
                                                    { 0.647702E+15, 0.742501E+15, 0.000000E+00, 0.000000E+00},
                                                    { 0.399827E+15, 0.647702E+15, 0.000000E+00, 0.000000E+00}
                                                    },

                                                    {{ 0.877711E+15, 0.857470E+15, 0.877711E+15, 0.857470E+15},
                                                    { 0.870003E+15, 0.877711E+15, 0.857470E+15, 0.857365E+15},
                                                    { 0.877711E+15, 0.870003E+15, 0.857365E+15, 0.817753E+15},
                                                    { 0.857470E+15, 0.877711E+15, 0.817753E+15, 0.804289E+15},
                                                    { 0.857365E+15, 0.857470E+15, 0.804289E+15, 0.717501E+15},
                                                    { 0.817753E+15, 0.857365E+15, 0.717501E+15, 0.634021E+15},
                                                    { 0.804289E+15, 0.817753E+15, 0.634021E+15, 0.394617E+15},
                                                    { 0.717501E+15, 0.804289E+15, 0.394617E+15, 0.000000E+00},
                                                    { 0.634021E+15, 0.717501E+15, 0.000000E+00, 0.000000E+00},
                                                    { 0.394617E+15, 0.634021E+15, 0.000000E+00, 0.000000E+00}
                                                    },

                                                    {{ 0.860477E+15, 0.842766E+15, 0.860635E+15, 0.842772E+15},
                                                    { 0.850615E+15, 0.860468E+15, 0.842648E+15, 0.842999E+15},
                                                    { 0.860210E+15, 0.850565E+15, 0.842843E+15, 0.804047E+15},
                                                    { 0.842031E+15, 0.860160E+15, 0.803926E+15, 0.793019E+15},
                                                    { 0.841828E+15, 0.842021E+15, 0.793061E+15, 0.707973E+15},
                                                    { 0.802423E+15, 0.842040E+15, 0.708283E+15, 0.630154E+15},
                                                    { 0.791098E+15, 0.803012E+15, 0.631186E+15, 0.390364E+15},
                                                    { 0.706150E+15, 0.792093E+15, 0.392028E+15, 0.000000E+00},
                                                    { 0.631671E+15, 0.707501E+15, 0.000000E+00, 0.000000E+00},
                                                    { 0.388782E+15, 0.630533E+15, 0.000000E+00, 0.000000E+00}
                                                    },

                                                    { { 0.835710E+15, 0.818237E+15, 0.835925E+15, 0.818244E+15},
                                                    { 0.826405E+15, 0.835696E+15, 0.818076E+15, 0.820126E+15},
                                                    { 0.835346E+15, 0.826339E+15, 0.819913E+15, 0.783474E+15},
                                                    { 0.817238E+15, 0.835279E+15, 0.783310E+15, 0.774569E+15},
                                                    { 0.818531E+15, 0.817224E+15, 0.774627E+15, 0.692347E+15},
                                                    { 0.781261E+15, 0.818819E+15, 0.692772E+15, 0.623311E+15},
                                                    { 0.771944E+15, 0.782064E+15, 0.624740E+15, 0.387386E+15},
                                                    { 0.689852E+15, 0.773304E+15, 0.389700E+15, 0.000000E+00},
                                                    { 0.625412E+15, 0.691700E+15, 0.000000E+00, 0.000000E+00},
                                                    { 0.385189E+15, 0.623835E+15, 0.000000E+00, 0.000000E+00}
                                                    },

                                                    { { 0.755830E+15, 0.740764E+15, 0.756108E+15, 0.740773E+15},
                                                    { 0.746611E+15, 0.755812E+15, 0.740556E+15, 0.742449E+15},
                                                    { 0.755360E+15, 0.746525E+15, 0.742174E+15, 0.709103E+15},
                                                    { 0.739473E+15, 0.755273E+15, 0.708891E+15, 0.701351E+15},
                                                    { 0.740388E+15, 0.739455E+15, 0.701426E+15, 0.626602E+15},
                                                    { 0.706243E+15, 0.740761E+15, 0.627151E+15, 0.569408E+15},
                                                    { 0.697958E+15, 0.707280E+15, 0.571274E+15, 0.353879E+15},
                                                    { 0.623379E+15, 0.699715E+15, 0.356903E+15, 0.000000E+00},
                                                    { 0.572152E+15, 0.625766E+15, 0.000000E+00, 0.000000E+00},
                                                    { 0.351015E+15, 0.570093E+15, 0.000000E+00, 0.000000E+00}
                                                    },

                                                    { { 0.733598E+15, 0.717490E+15, 0.733950E+15, 0.717501E+15},
                                                    { 0.726213E+15, 0.733577E+15, 0.717228E+15, 0.721624E+15},
                                                    { 0.733006E+15, 0.726105E+15, 0.721276E+15, 0.691099E+15},
                                                    { 0.715864E+15, 0.732896E+15, 0.690831E+15, 0.684695E+15},
                                                    { 0.719021E+15, 0.715841E+15, 0.684790E+15, 0.611984E+15},
                                                    { 0.687478E+15, 0.719491E+15, 0.612680E+15, 0.561026E+15},
                                                    { 0.680392E+15, 0.688790E+15, 0.563417E+15, 0.348502E+15},
                                                    { 0.607894E+15, 0.682619E+15, 0.352379E+15, 0.000000E+00},
                                                    { 0.564543E+15, 0.610922E+15, 0.000000E+00, 0.000000E+00},
                                                    { 0.344841E+15, 0.561903E+15, 0.000000E+00, 0.000000E+00}
                                                    },

                                                    { { 0.693314E+15, 0.678597E+15, 0.693902E+15, 0.678616E+15},
                                                    { 0.685735E+15, 0.693277E+15, 0.678159E+15, 0.682250E+15},
                                                    { 0.692323E+15, 0.685553E+15, 0.681668E+15, 0.652728E+15},
                                                    { 0.675879E+15, 0.692140E+15, 0.652278E+15, 0.650164E+15},
                                                    { 0.677901E+15, 0.675841E+15, 0.650325E+15, 0.581825E+15},
                                                    { 0.646689E+15, 0.678686E+15, 0.582997E+15, 0.542325E+15},
                                                    { 0.642953E+15, 0.648874E+15, 0.546422E+15, 0.333707E+15},
                                                    { 0.574964E+15, 0.646682E+15, 0.340303E+15, 0.000000E+00},
                                                    { 0.548355E+15, 0.580040E+15, 0.000000E+00, 0.000000E+00},
                                                    { 0.327530E+15, 0.543826E+15, 0.000000E+00, 0.000000E+00}
                                                    },

                                                    { { 0.653174E+15, 0.640846E+15, 0.654042E+15, 0.640874E+15},
                                                    { 0.644328E+15, 0.653120E+15, 0.640199E+15, 0.644047E+15},
                                                    { 0.651714E+15, 0.644061E+15, 0.643188E+15, 0.615420E+15},
                                                    { 0.636832E+15, 0.651444E+15, 0.614757E+15, 0.614808E+15},
                                                    { 0.637633E+15, 0.636777E+15, 0.615047E+15, 0.549409E+15},
                                                    { 0.606531E+15, 0.638789E+15, 0.551142E+15, 0.517406E+15},
                                                    { 0.604168E+15, 0.609743E+15, 0.523536E+15, 0.312295E+15},
                                                    { 0.539302E+15, 0.609662E+15, 0.322011E+15, 0.000000E+00},
                                                    { 0.526439E+15, 0.546774E+15, 0.000000E+00, 0.000000E+00},
                                                    { 0.303294E+15, 0.519649E+15, 0.000000E+00, 0.000000E+00}
                                                    },

                                                    { { 0.602014E+15, 0.589637E+15, 0.603168E+15, 0.589675E+15},
                                                    { 0.594854E+15, 0.601942E+15, 0.588778E+15, 0.594150E+15},
                                                    { 0.600071E+15, 0.594498E+15, 0.593006E+15, 0.568365E+15},
                                                    { 0.584311E+15, 0.599712E+15, 0.567481E+15, 0.567475E+15},
                                                    { 0.585622E+15, 0.584237E+15, 0.567793E+15, 0.504701E+15},
                                                    { 0.556546E+15, 0.587156E+15, 0.507003E+15, 0.478006E+15},
                                                    { 0.553344E+15, 0.560807E+15, 0.486209E+15, 0.280563E+15},
                                                    { 0.491345E+15, 0.560627E+15, 0.293258E+15, 0.000000E+00},
                                                    { 0.490107E+15, 0.501208E+15, 0.000000E+00, 0.000000E+00},
                                                    { 0.268959E+15, 0.481003E+15, 0.000000E+00, 0.000000E+00}
                                                    },

                                                    { { 0.558062E+15, 0.547699E+15, 0.559174E+15, 0.547735E+15},
                                                    { 0.550237E+15, 0.557993E+15, 0.546870E+15, 0.552162E+15},
                                                    { 0.556192E+15, 0.549895E+15, 0.551058E+15, 0.528342E+15},
                                                    { 0.542562E+15, 0.555846E+15, 0.527488E+15, 0.529920E+15},
                                                    { 0.543934E+15, 0.542491E+15, 0.530229E+15, 0.472558E+15},
                                                    { 0.516937E+15, 0.545413E+15, 0.474797E+15, 0.453986E+15},
                                                    { 0.516224E+15, 0.521048E+15, 0.462079E+15, 0.267397E+15},
                                                    { 0.459578E+15, 0.523281E+15, 0.279973E+15, 0.000000E+00},
                                                    { 0.465927E+15, 0.469163E+15, 0.000000E+00, 0.000000E+00},
                                                    { 0.255921E+15, 0.456943E+15, 0.000000E+00, 0.000000E+00}
                                                    },

                                                    { { 0.518273E+15, 0.508288E+15, 0.519056E+15, 0.508314E+15},
                                                    { 0.511447E+15, 0.518224E+15, 0.507704E+15, 0.512561E+15},
                                                    { 0.516954E+15, 0.511205E+15, 0.511783E+15, 0.491002E+15},
                                                    { 0.504664E+15, 0.516710E+15, 0.490400E+15, 0.494994E+15},
                                                    { 0.506751E+15, 0.504614E+15, 0.495213E+15, 0.444584E+15},
                                                    { 0.482934E+15, 0.507797E+15, 0.446182E+15, 0.439712E+15},
                                                    { 0.485250E+15, 0.485847E+15, 0.445651E+15, 0.269612E+15},
                                                    { 0.435281E+15, 0.490278E+15, 0.279185E+15, 0.000000E+00},
                                                    { 0.448466E+15, 0.442157E+15, 0.000000E+00, 0.000000E+00},
                                                    { 0.260780E+15, 0.441885E+15, 0.000000E+00, 0.000000E+00}
                                                    },

                                                    { { 0.481193E+15, 0.472739E+15, 0.481689E+15, 0.472755E+15},
                                                    { 0.474040E+15, 0.481162E+15, 0.472368E+15, 0.477704E+15},
                                                    { 0.480356E+15, 0.473887E+15, 0.477208E+15, 0.458826E+15},
                                                    { 0.470435E+15, 0.480201E+15, 0.458442E+15, 0.466001E+15},
                                                    { 0.473999E+15, 0.470403E+15, 0.466142E+15, 0.422228E+15},
                                                    { 0.453664E+15, 0.474668E+15, 0.423263E+15, 0.427308E+15},
                                                    { 0.459716E+15, 0.455531E+15, 0.431241E+15, 0.271881E+15},
                                                    { 0.416174E+15, 0.462965E+15, 0.278437E+15, 0.000000E+00},
                                                    { 0.433099E+15, 0.420652E+15, 0.000000E+00, 0.000000E+00},
                                                    { 0.265766E+15, 0.428748E+15, 0.000000E+00, 0.000000E+00}
                                                    },

                                                    { { 0.447353E+15, 0.440229E+15, 0.447633E+15, 0.440238E+15},
                                                    { 0.439962E+15, 0.447335E+15, 0.440019E+15, 0.445354E+15},
                                                    { 0.446880E+15, 0.439876E+15, 0.445073E+15, 0.428487E+15},
                                                    { 0.438925E+15, 0.446792E+15, 0.428269E+15, 0.436909E+15},
                                                    { 0.443254E+15, 0.438907E+15, 0.436989E+15, 0.398164E+15},
                                                    { 0.425554E+15, 0.443633E+15, 0.398756E+15, 0.412452E+15},
                                                    { 0.433322E+15, 0.426616E+15, 0.414752E+15, 0.271259E+15},
                                                    { 0.394688E+15, 0.435178E+15, 0.275212E+15, 0.000000E+00},
                                                    { 0.415836E+15, 0.397261E+15, 0.000000E+00, 0.000000E+00},
                                                    { 0.267539E+15, 0.413295E+15, 0.000000E+00, 0.000000E+00}
                                                    },

                                                    { { 0.415491E+15, 0.408361E+15, 0.415629E+15, 0.408365E+15},
                                                    { 0.409202E+15, 0.415482E+15, 0.408258E+15, 0.413304E+15},
                                                    { 0.415259E+15, 0.409160E+15, 0.413166E+15, 0.398028E+15},
                                                    { 0.407720E+15, 0.415216E+15, 0.397920E+15, 0.407676E+15},
                                                    { 0.412271E+15, 0.407711E+15, 0.407715E+15, 0.373505E+15},
                                                    { 0.396583E+15, 0.412458E+15, 0.373800E+15, 0.393686E+15},
                                                    { 0.405900E+15, 0.397106E+15, 0.394847E+15, 0.265257E+15},
                                                    { 0.371775E+15, 0.406820E+15, 0.267296E+15, 0.000000E+00},
                                                    { 0.395393E+15, 0.373057E+15, 0.000000E+00, 0.000000E+00},
                                                    { 0.263325E+15, 0.394112E+15, 0.000000E+00, 0.000000E+00}
                                                    },

                                                    { { 0.356041E+15, 0.350993E+15, 0.356094E+15, 0.350994E+15},
                                                    { 0.349538E+15, 0.356038E+15, 0.350953E+15, 0.354488E+15},
                                                    { 0.355953E+15, 0.349521E+15, 0.354436E+15, 0.340900E+15},
                                                    { 0.350748E+15, 0.355936E+15, 0.340859E+15, 0.352606E+15},
                                                    { 0.354095E+15, 0.350744E+15, 0.352621E+15, 0.325687E+15},
                                                    { 0.340349E+15, 0.354166E+15, 0.325801E+15, 0.350429E+15},
                                                    { 0.351923E+15, 0.340549E+15, 0.350888E+15, 0.240793E+15},
                                                    { 0.325016E+15, 0.352277E+15, 0.241614E+15, 0.000000E+00},
                                                    { 0.351103E+15, 0.325513E+15, 0.000000E+00, 0.000000E+00},
                                                    { 0.240012E+15, 0.350597E+15, 0.000000E+00, 0.000000E+00}
                                                    },

                                                    { { 0.309181E+15, 0.303568E+15, 0.309181E+15, 0.303568E+15},
                                                    { 0.304851E+15, 0.309181E+15, 0.303568E+15, 0.309323E+15},
                                                    { 0.309181E+15, 0.304851E+15, 0.309323E+15, 0.299753E+15},
                                                    { 0.303568E+15, 0.309181E+15, 0.299753E+15, 0.307823E+15},
                                                    { 0.309323E+15, 0.303568E+15, 0.307823E+15, 0.283238E+15},
                                                    { 0.299753E+15, 0.309323E+15, 0.283238E+15, 0.311628E+15},
                                                    { 0.307823E+15, 0.299753E+15, 0.311628E+15, 0.218069E+15},
                                                    { 0.283238E+15, 0.307823E+15, 0.218069E+15, 0.000000E+00},
                                                    { 0.311628E+15, 0.283238E+15, 0.000000E+00, 0.000000E+00},
                                                    { 0.218069E+15, 0.311628E+15, 0.000000E+00, 0.000000E+00}
                                                    }
                                                  };
            return H;
        }

        /// <summary>
        /// This method returns the vertical component of direct solar irradiance.  The array indices represent the following:
        /// 22 --> the number of wavelengths
        /// 10 --> the number of latitudes
        /// 4 --> the seasons
        /// </summary>
        /// <returns></returns>
        public double[,,] getSN()
        {
            double[,,] SN = new double[22, 10, 4] {
                                                { { 0.107679E+16, 0.100472E+16, 0.107679E+16, 0.100472E+16},
                                                { 0.111760E+16, 0.107679E+16, 0.100472E+16, 0.856412E+15},
                                                { 0.107679E+16, 0.111760E+16, 0.856412E+15, 0.696028E+15},
                                                { 0.100472E+16, 0.107679E+16, 0.696028E+15, 0.474442E+15},
                                                { 0.856412E+15, 0.100472E+16, 0.474442E+15, 0.283800E+15},
                                                { 0.696028E+15, 0.856412E+15, 0.283800E+15, 0.105342E+15},
                                                { 0.474442E+15, 0.696028E+15, 0.105342E+15, 0.840461E+13},
                                                { 0.283800E+15, 0.474442E+15, 0.840461E+13, 0.000000E+00},
                                                { 0.105342E+15, 0.283800E+15, 0.000000E+00, 0.000000E+00},
                                                { 0.840461E+13, 0.105342E+15, 0.000000E+00, 0.000000E+00}
                                                },

                                                { { 0.159972E+16, 0.149731E+16, 0.159972E+16, 0.149731E+16},
                                                { 0.165541E+16, 0.159972E+16, 0.149731E+16, 0.128328E+16},
                                                { 0.159972E+16, 0.165541E+16, 0.128328E+16, 0.104963E+16},
                                                { 0.149731E+16, 0.159972E+16, 0.104963E+16, 0.725322E+15},
                                                { 0.128328E+16, 0.149731E+16, 0.725322E+15, 0.443301E+15},
                                                { 0.104963E+16, 0.128328E+16, 0.443301E+15, 0.167522E+15},
                                                { 0.725322E+15, 0.104963E+16, 0.167522E+15, 0.161494E+14},
                                                { 0.443301E+15, 0.725322E+15, 0.161494E+14, 0.000000E+00},
                                                { 0.167522E+15, 0.443301E+15, 0.000000E+00, 0.000000E+00},
                                                { 0.161494E+14, 0.167522E+15, 0.000000E+00, 0.000000E+00}
                                                },

                                                { { 0.216410E+16, 0.202727E+16, 0.216410E+16, 0.202727E+16},
                                                { 0.223759E+16, 0.216410E+16, 0.202727E+16, 0.174680E+16},
                                                { 0.216410E+16, 0.223759E+16, 0.174680E+16, 0.143762E+16},
                                                { 0.202727E+16, 0.216410E+16, 0.143762E+16, 0.100526E+16},
                                                { 0.174680E+16, 0.202727E+16, 0.100526E+16, 0.625561E+15},
                                                { 0.143762E+16, 0.174680E+16, 0.625561E+15, 0.240013E+15},
                                                { 0.100526E+16, 0.143762E+16, 0.240013E+15, 0.264607E+14},
                                                { 0.625561E+15, 0.100526E+16, 0.264607E+14, 0.000000E+00},
                                                { 0.240013E+15, 0.625561E+15, 0.000000E+00, 0.000000E+00},
                                                { 0.264607E+14, 0.240013E+15, 0.000000E+00, 0.000000E+00}
                                                },

                                                { { 0.227904E+16, 0.213648E+16, 0.227904E+16, 0.213648E+16},
                                                { 0.235481E+16, 0.227904E+16, 0.213648E+16, 0.184769E+16},
                                                { 0.227904E+16, 0.235481E+16, 0.184769E+16, 0.152708E+16},
                                                { 0.213648E+16, 0.227904E+16, 0.152708E+16, 0.107912E+16},
                                                { 0.184769E+16, 0.213648E+16, 0.107912E+16, 0.682081E+15},
                                                { 0.152708E+16, 0.184769E+16, 0.682081E+15, 0.265918E+15},
                                                { 0.107912E+16, 0.152708E+16, 0.265918E+15, 0.331357E+14},
                                                { 0.682081E+15, 0.107912E+16, 0.331357E+14, 0.000000E+00},
                                                { 0.265918E+15, 0.682081E+15, 0.000000E+00, 0.000000E+00},
                                                { 0.331357E+14, 0.265918E+15, 0.000000E+00, 0.000000E+00}
                                                },

                                                { { 0.224660E+16, 0.210741E+16, 0.224660E+16, 0.210741E+16},
                                                { 0.231987E+16, 0.224660E+16, 0.210741E+16, 0.182854E+16},
                                                { 0.224660E+16, 0.231987E+16, 0.182854E+16, 0.151691E+16},
                                                { 0.210741E+16, 0.224660E+16, 0.151691E+16, 0.108303E+16},
                                                { 0.182854E+16, 0.210741E+16, 0.108303E+16, 0.694801E+15},
                                                { 0.151691E+16, 0.182854E+16, 0.694801E+15, 0.275262E+15},
                                                { 0.108303E+16, 0.151691E+16, 0.275262E+15, 0.382063E+14},
                                                { 0.694801E+15, 0.108303E+16, 0.382063E+14, 0.000000E+00},
                                                { 0.275262E+15, 0.694801E+15, 0.000000E+00, 0.000000E+00},
                                                { 0.382063E+14, 0.275262E+15, 0.000000E+00, 0.000000E+00}
                                                },

                                                { { 0.270552E+16, 0.254140E+16, 0.270552E+16, 0.254140E+16},
                                                { 0.279001E+16, 0.270552E+16, 0.254140E+16, 0.221356E+16},
                                                { 0.270552E+16, 0.279001E+16, 0.221356E+16, 0.184425E+16},
                                                { 0.254140E+16, 0.270552E+16, 0.184425E+16, 0.132913E+16},
                                                { 0.221356E+16, 0.254140E+16, 0.132913E+16, 0.864001E+15},
                                                { 0.184425E+16, 0.221356E+16, 0.864001E+15, 0.347835E+15},
                                                { 0.132913E+16, 0.184425E+16, 0.347835E+15, 0.531366E+14},
                                                { 0.864001E+15, 0.132913E+16, 0.531366E+14, 0.000000E+00},
                                                { 0.347835E+15, 0.864001E+15, 0.000000E+00, 0.000000E+00},
                                                { 0.531366E+14, 0.347835E+15, 0.000000E+00, 0.000000E+00}
                                                },

                                                { { 0.308984E+16, 0.290365E+16, 0.308984E+16, 0.290365E+16},
                                                { 0.318501E+16, 0.308984E+16, 0.290365E+16, 0.253962E+16},
                                                { 0.308984E+16, 0.318501E+16, 0.253962E+16, 0.212577E+16},
                                                { 0.290365E+16, 0.308984E+16, 0.212577E+16, 0.154430E+16},
                                                { 0.253962E+16, 0.290365E+16, 0.154430E+16, 0.101500E+16},
                                                { 0.212577E+16, 0.253962E+16, 0.101500E+16, 0.414700E+15},
                                                { 0.154430E+16, 0.212577E+16, 0.414700E+15, 0.685914E+14},
                                                { 0.101500E+16, 0.154430E+16, 0.685914E+14, 0.000000E+00},
                                                { 0.414700E+15, 0.101500E+16, 0.000000E+00, 0.000000E+00},
                                                { 0.685914E+14, 0.414700E+15, 0.000000E+00, 0.000000E+00}
                                                },

                                                { { 0.316862E+16, 0.298352E+16, 0.316862E+16, 0.298352E+16},
                                                { 0.326001E+16, 0.316862E+16, 0.298352E+16, 0.261540E+16},
                                                { 0.316862E+16, 0.326001E+16, 0.261540E+16, 0.219472E+16},
                                                { 0.298352E+16, 0.316862E+16, 0.219472E+16, 0.160536E+16},
                                                { 0.261540E+16, 0.298352E+16, 0.160536E+16, 0.106500E+16},
                                                { 0.219472E+16, 0.261540E+16, 0.106500E+16, 0.442062E+15},
                                                { 0.160536E+16, 0.219472E+16, 0.442062E+15, 0.790103E+14},
                                                { 0.106500E+16, 0.160536E+16, 0.790103E+14, 0.000000E+00},
                                                { 0.442062E+15, 0.106500E+16, 0.000000E+00, 0.000000E+00},
                                                { 0.790103E+14, 0.442062E+15, 0.000000E+00, 0.000000E+00}
                                                },

                                                { { 0.332583E+16, 0.313027E+16, 0.332644E+16, 0.313029E+16},
                                                { 0.342295E+16, 0.332579E+16, 0.312983E+16, 0.275084E+16},
                                                { 0.332480E+16, 0.342276E+16, 0.275033E+16, 0.231409E+16},
                                                { 0.312754E+16, 0.332461E+16, 0.231374E+16, 0.170109E+16},
                                                { 0.274702E+16, 0.312751E+16, 0.170118E+16, 0.113531E+16},
                                                { 0.230941E+16, 0.274771E+16, 0.113581E+16, 0.476850E+15},
                                                { 0.169697E+16, 0.231111E+16, 0.477631E+15, 0.906202E+14},
                                                { 0.113238E+16, 0.169910E+16, 0.910066E+14, 0.000000E+00},
                                                { 0.477998E+15, 0.113455E+16, 0.000000E+00, 0.000000E+00},
                                                { 0.902529E+14, 0.477137E+15, 0.000000E+00, 0.000000E+00}
                                                },

                                                { { 0.344778E+16, 0.324852E+16, 0.344867E+16, 0.324855E+16},
                                                { 0.354471E+16, 0.344773E+16, 0.324789E+16, 0.285975E+16},
                                                { 0.344628E+16, 0.354442E+16, 0.285901E+16, 0.241008E+16},
                                                { 0.324456E+16, 0.344600E+16, 0.240957E+16, 0.178234E+16},
                                                { 0.285419E+16, 0.324450E+16, 0.178248E+16, 0.119869E+16},
                                                { 0.240327E+16, 0.285520E+16, 0.119943E+16, 0.509183E+15},
                                                { 0.177630E+16, 0.240574E+16, 0.510351E+15, 0.101667E+15},
                                                { 0.119437E+16, 0.177943E+16, 0.102274E+15, 0.000000E+00},
                                                { 0.510900E+15, 0.119757E+16, 0.000000E+00, 0.000000E+00},
                                                { 0.101090E+15, 0.509612E+15, 0.000000E+00, 0.000000E+00}
                                                },

                                                { { 0.329489E+16, 0.310525E+16, 0.329610E+16, 0.310528E+16},
                                                { 0.338659E+16, 0.329481E+16, 0.310438E+16, 0.273956E+16},
                                                { 0.329284E+16, 0.338620E+16, 0.273855E+16, 0.231391E+16},
                                                { 0.309983E+16, 0.329246E+16, 0.231322E+16, 0.172136E+16},
                                                { 0.273196E+16, 0.309976E+16, 0.172154E+16, 0.116611E+16},
                                                { 0.230458E+16, 0.273333E+16, 0.116713E+16, 0.500948E+15},
                                                { 0.171303E+16, 0.230796E+16, 0.502590E+15, 0.104823E+15},
                                                { 0.116011E+16, 0.171734E+16, 0.105719E+15, 0.000000E+00},
                                                { 0.503362E+15, 0.116455E+16, 0.000000E+00, 0.000000E+00},
                                                { 0.103975E+15, 0.501550E+15, 0.000000E+00, 0.000000E+00}
                                                },

                                                { { 0.339913E+16, 0.320897E+16, 0.340076E+16, 0.320902E+16},
                                                { 0.348780E+16, 0.339903E+16, 0.320780E+16, 0.283304E+16},
                                                { 0.339638E+16, 0.348728E+16, 0.283168E+16, 0.239430E+16},
                                                { 0.320170E+16, 0.339587E+16, 0.239337E+16, 0.178953E+16},
                                                { 0.282282E+16, 0.320160E+16, 0.178978E+16, 0.121908E+16},
                                                { 0.238176E+16, 0.282467E+16, 0.122047E+16, 0.529238E+15},
                                                { 0.177828E+16, 0.238630E+16, 0.531495E+15, 0.115355E+15},
                                                { 0.121093E+16, 0.178410E+16, 0.116638E+15, 0.000000E+00},
                                                { 0.532556E+15, 0.121697E+16, 0.000000E+00, 0.000000E+00},
                                                { 0.114143E+15, 0.530066E+15, 0.000000E+00, 0.000000E+00}
                                                },

                                                { { 0.367406E+16, 0.347268E+16, 0.367717E+16, 0.347278E+16},
                                                { 0.376512E+16, 0.367386E+16, 0.347044E+16, 0.308013E+16},
                                                { 0.366881E+16, 0.376413E+16, 0.307750E+16, 0.261483E+16},
                                                { 0.345877E+16, 0.366784E+16, 0.261303E+16, 0.197094E+16},
                                                { 0.306049E+16, 0.345857E+16, 0.197143E+16, 0.135507E+16},
                                                { 0.259064E+16, 0.306404E+16, 0.135780E+16, 0.602208E+15},
                                                { 0.194908E+16, 0.259939E+16, 0.606757E+15, 0.142554E+15},
                                                { 0.133909E+16, 0.196038E+16, 0.145372E+15, 0.000000E+00},
                                                { 0.608905E+15, 0.135092E+16, 0.000000E+00, 0.000000E+00},
                                                { 0.139916E+15, 0.603875E+15, 0.000000E+00, 0.000000E+00}
                                                },

                                                { { 0.389823E+16, 0.368610E+16, 0.390340E+16, 0.368627E+16},
                                                { 0.399272E+16, 0.389791E+16, 0.368238E+16, 0.327962E+16},
                                                { 0.388951E+16, 0.399107E+16, 0.327524E+16, 0.279151E+16},
                                                { 0.366302E+16, 0.388790E+16, 0.278850E+16, 0.211628E+16},
                                                { 0.324695E+16, 0.366270E+16, 0.211710E+16, 0.146253E+16},
                                                { 0.275119E+16, 0.325284E+16, 0.146714E+16, 0.660211E+15},
                                                { 0.207965E+16, 0.276576E+16, 0.668034E+15, 0.164034E+15},
                                                { 0.143562E+16, 0.209856E+16, 0.169137E+15, 0.000000E+00},
                                                { 0.671738E+15, 0.145551E+16, 0.000000E+00, 0.000000E+00},
                                                { 0.159306E+15, 0.663075E+15, 0.000000E+00, 0.000000E+00}
                                                },

                                                { { 0.400821E+16, 0.379657E+16, 0.401590E+16, 0.379681E+16},
                                                { 0.409789E+16, 0.400773E+16, 0.379104E+16, 0.338208E+16},
                                                { 0.399528E+16, 0.409543E+16, 0.337557E+16, 0.287998E+16},
                                                { 0.376227E+16, 0.399288E+16, 0.287550E+16, 0.219335E+16},
                                                { 0.333354E+16, 0.376180E+16, 0.219458E+16, 0.152043E+16},
                                                { 0.282010E+16, 0.334227E+16, 0.152736E+16, 0.693707E+15},
                                                { 0.213873E+16, 0.284169E+16, 0.705611E+15, 0.177198E+15},
                                                { 0.148019E+16, 0.216688E+16, 0.185216E+15, 0.000000E+00},
                                                { 0.711268E+15, 0.150991E+16, 0.000000E+00, 0.000000E+00},
                                                { 0.169869E+15, 0.698056E+15, 0.000000E+00, 0.000000E+00}
                                                },

                                                { { 0.409941E+16, 0.388368E+16, 0.410758E+16, 0.388394E+16},
                                                { 0.419027E+16, 0.409890E+16, 0.387780E+16, 0.346845E+16},
                                                { 0.408567E+16, 0.418766E+16, 0.346151E+16, 0.296112E+16},
                                                { 0.384726E+16, 0.408313E+16, 0.295634E+16, 0.226776E+16},
                                                { 0.341676E+16, 0.384675E+16, 0.226908E+16, 0.158193E+16},
                                                { 0.289721E+16, 0.342605E+16, 0.158943E+16, 0.736905E+15},
                                                { 0.220915E+16, 0.292025E+16, 0.750041E+15, 0.197801E+15},
                                                { 0.153848E+16, 0.223935E+16, 0.207103E+15, 0.000000E+00},
                                                { 0.756288E+15, 0.157057E+16, 0.000000E+00, 0.000000E+00},
                                                { 0.189312E+15, 0.741704E+15, 0.000000E+00, 0.000000E+00}
                                                },

                                                { { 0.413326E+16, 0.391825E+16, 0.413951E+16, 0.391845E+16},
                                                { 0.422271E+16, 0.413287E+16, 0.391375E+16, 0.351081E+16},
                                                { 0.412274E+16, 0.422072E+16, 0.350548E+16, 0.300988E+16},
                                                { 0.389032E+16, 0.412079E+16, 0.300619E+16, 0.232655E+16},
                                                { 0.347102E+16, 0.388993E+16, 0.232758E+16, 0.164407E+16},
                                                { 0.296043E+16, 0.347819E+16, 0.164998E+16, 0.789312E+15},
                                                { 0.228075E+16, 0.297828E+16, 0.799972E+15, 0.227809E+15},
                                                { 0.160967E+16, 0.230439E+16, 0.235898E+15, 0.000000E+00},
                                                { 0.805026E+15, 0.163510E+16, 0.000000E+00, 0.000000E+00},
                                                { 0.220346E+15, 0.793212E+15, 0.000000E+00, 0.000000E+00}
                                                },

                                                { { 0.417034E+16, 0.395337E+16, 0.417464E+16, 0.395350E+16},
                                                { 0.426115E+16, 0.417007E+16, 0.395026E+16, 0.355123E+16},
                                                { 0.416308E+16, 0.425978E+16, 0.354755E+16, 0.305487E+16},
                                                { 0.393410E+16, 0.416174E+16, 0.305231E+16, 0.237884E+16},
                                                { 0.352369E+16, 0.393383E+16, 0.237956E+16, 0.169908E+16},
                                                { 0.302050E+16, 0.352866E+16, 0.170325E+16, 0.841050E+15},
                                                { 0.234676E+16, 0.303293E+16, 0.848791E+15, 0.260620E+15},
                                                { 0.167472E+16, 0.236334E+16, 0.266904E+15, 0.000000E+00},
                                                { 0.852449E+15, 0.169274E+16, 0.000000E+00, 0.000000E+00},
                                                { 0.254758E+15, 0.843885E+15, 0.000000E+00, 0.000000E+00}
                                                },

                                                { { 0.417445E+16, 0.395722E+16, 0.417706E+16, 0.395731E+16},
                                                { 0.426583E+16, 0.417428E+16, 0.395534E+16, 0.356283E+16},
                                                { 0.417004E+16, 0.426499E+16, 0.356059E+16, 0.307410E+16},
                                                { 0.394550E+16, 0.416922E+16, 0.307254E+16, 0.241121E+16},
                                                { 0.354603E+16, 0.394534E+16, 0.241166E+16, 0.173975E+16},
                                                { 0.305306E+16, 0.354906E+16, 0.174234E+16, 0.882971E+15},
                                                { 0.239142E+16, 0.306068E+16, 0.887896E+15, 0.289565E+15},
                                                { 0.172456E+16, 0.240166E+16, 0.293784E+15, 0.000000E+00},
                                                { 0.890218E+15, 0.173580E+16, 0.000000E+00, 0.000000E+00},
                                                { 0.285593E+15, 0.884777E+15, 0.000000E+00, 0.000000E+00}
                                                },

                                                { { 0.414496E+16, 0.393166E+16, 0.414634E+16, 0.393171E+16},
                                                { 0.423348E+16, 0.414487E+16, 0.393067E+16, 0.354698E+16},
                                                { 0.414264E+16, 0.423304E+16, 0.354580E+16, 0.306829E+16},
                                                { 0.392549E+16, 0.414221E+16, 0.306746E+16, 0.242017E+16},
                                                { 0.353811E+16, 0.392540E+16, 0.242040E+16, 0.175974E+16},
                                                { 0.305715E+16, 0.353972E+16, 0.176112E+16, 0.913214E+15},
                                                { 0.240963E+16, 0.306119E+16, 0.915908E+15, 0.314253E+15},
                                                { 0.175159E+16, 0.241509E+16, 0.316670E+15, 0.000000E+00},
                                                { 0.917175E+15, 0.175762E+16, 0.000000E+00, 0.000000E+00},
                                                { 0.311964E+15, 0.914203E+15, 0.000000E+00, 0.000000E+00}
                                                },

                                                { { 0.400369E+16, 0.379792E+16, 0.400428E+16, 0.379794E+16},
                                                { 0.408911E+16, 0.400365E+16, 0.379749E+16, 0.343708E+16},
                                                { 0.400270E+16, 0.408892E+16, 0.343658E+16, 0.298379E+16},
                                                { 0.379527E+16, 0.400251E+16, 0.298343E+16, 0.236761E+16},
                                                { 0.343326E+16, 0.379523E+16, 0.236771E+16, 0.173461E+16},
                                                { 0.297897E+16, 0.343395E+16, 0.173522E+16, 0.925262E+15},
                                                { 0.236302E+16, 0.298071E+16, 0.926474E+15, 0.336047E+15},
                                                { 0.173104E+16, 0.236540E+16, 0.337193E+15, 0.000000E+00},
                                                { 0.927044E+15, 0.173369E+16, 0.000000E+00, 0.000000E+00},
                                                { 0.334957E+15, 0.925708E+15, 0.000000E+00, 0.000000E+00}
                                                },

                                                { { 0.386252E+16, 0.366847E+16, 0.386252E+16, 0.366847E+16},
                                                { 0.394031E+16, 0.386252E+16, 0.366847E+16, 0.332177E+16},
                                                { 0.386252E+16, 0.394031E+16, 0.332177E+16, 0.288600E+16},
                                                { 0.366847E+16, 0.386252E+16, 0.288600E+16, 0.230904E+16},
                                                { 0.332177E+16, 0.366847E+16, 0.230904E+16, 0.170853E+16},
                                                { 0.288600E+16, 0.332177E+16, 0.170853E+16, 0.932940E+15},
                                                { 0.230904E+16, 0.288600E+16, 0.932940E+15, 0.353966E+15},
                                                { 0.170853E+16, 0.230904E+16, 0.353966E+15, 0.000000E+00},
                                                { 0.932940E+15, 0.170853E+16, 0.000000E+00, 0.000000E+00},
                                                { 0.353966E+15, 0.932940E+15, 0.000000E+00, 0.000000E+00}
                                                }
                                               };
            return SN;
        }

        public double[,] getMiddayH()
        {
            double[,] H = new double[40, 15] {
                                                {1.65E-07,3.87E-07,1.10E-06,2.82E-06,4.47E-06,7.07E-06,9.73E-06,1.19E-05,1.50E-05,1.70E-05,2.28E-05,2.30E-05,2.19E-05,2.08E-05,2.31E-05},
                                                {1.75E-07,4.01E-07,1.13E-06,2.88E-06,4.54E-06,7.17E-06,9.82E-06,1.20E-05,1.51E-05,1.71E-05,2.28E-05,2.30E-05,2.19E-05,2.08E-05,2.31E-05},
                                                {2.07E-07,4.49E-07,1.23E-06,3.07E-06,4.78E-06,7.45E-06,1.01E-05,1.21E-05,1.53E-05,1.73E-05,2.31E-05,2.31E-05,2.19E-05,2.08E-05,2.31E-05},
                                                {2.18E-07,4.62E-07,1.26E-06,3.12E-06,4.84E-06,7.52E-06,1.01E-05,1.22E-05,1.54E-05,1.74E-05,2.31E-05,2.31E-05,2.19E-05,2.08E-05,2.31E-05},
                                                {1.48E-07,3.59E-07,1.03E-06,2.70E-06,4.32E-06,6.89E-06,9.56E-06,1.18E-05,1.48E-05,1.68E-05,2.26E-05,2.30E-05,2.19E-05,2.08E-05,2.31E-05},
                                                {1.63E-07,3.33E-07,1.09E-06,2.80E-06,4.45E-06,7.05E-06,9.71E-06,1.19E-05,1.50E-05,1.70E-05,2.27E-05,2.30E-05,2.19E-05,2.08E-05,2.31E-05},
                                                {1.82E-07,4.13E-07,1.15E-06,2.93E-06,4.60E-06,7.24E-06,9.88E-06,1.20E-05,1.51E-05,1.72E-05,2.29E-05,2.30E-05,2.19E-05,2.08E-05,2.31E-05},
                                                {1.56E-07,3.81E-07,1.06E-06,2.71E-06,4.47E-06,6.84E-06,9.53E-06,1.13E-05,1.47E-05,1.67E-05,2.17E-05,2.24E-05,2.12E-05,2.03E-05,2.21E-05},
                                                {1.13E-07,3.00E-07,9.00E-07,2.44E-06,3.98E-06,6.48E-06,9.17E-06,1.15E-05,1.45E-05,1.65E-05,2.22E-05,2.29E-05,2.19E-05,2.08E-05,2.31E-05},
                                                {1.38E-07,3.42E-07,9.97E-07,2.63E-06,4.23E-06,6.78E-06,9.46E-06,1.17E-05,1.47E-05,1.67E-05,2.25E-05,2.30E-05,2.19E-05,2.08E-05,2.31E-05},
                                                {1.28E-07,3.34E-07,9.60E-07,2.52E-06,4.21E-06,6.35E-06,9.24E-06,1.11E-05,1.44E-05,1.64E-05,2.15E-05,2.24E-05,2.12E-05,2.03E-05,2.21E-05},
                                                {5.91E-08,2.11E-07,6.91E-07,1.91E-06,3.46E-06,4.77E-06,7.95E-06,9.65E-06,1.26E-05,1.48E-05,1.85E-05,2.06E-05,1.99E-05,1.90E-05,1.96E-05},
                                                {7.89E-08,2.35E-07,7.44E-07,2.13E-06,3.56E-06,5.96E-06,8.66E-06,1.11E-05,1.40E-05,1.60E-05,2.17E-05,2.28E-05,2.19E-05,2.08E-05,2.31E-05},
                                                {1.06E-07,2.86E-07,8.68E-07,2.38E-06,3.90E-06,6.38E-06,9.07E-06,1.14E-05,1.44E-05,1.64E-05,2.21E-05,2.29E-05,2.19E-05,2.08E-05,2.31E-05},
                                                {5.14E-08,1.92E-07,6.43E-07,1.82E-06,3.32E-06,4.62E-06,7.78E-06,9.52E-06,1.24E-05,1.46E-05,1.83E-05,2.05E-05,1.99E-05,1.90E-05,1.96E-05},
                                                {1.36E-08,7.53E-08,3.36E-07,1.05E-06,2.16E-06,3.11E-06,5.84E-06,7.51E-06,9.83E-06,1.23E-05,1.50E-05,1.83E-05,1.83E-05,1.72E-05,1.71E-05},
                                                {3.59E-08,1.42E-07,4.93E-07,1.56E-06,2.86E-06,4.72E-06,7.55E-06,9.80E-06,1.27E-05,1.47E-05,1.99E-05,2.20E-05,2.12E-05,2.03E-05,2.21E-05},
                                                {7.78E-08,2.33E-07,7.39E-07,2.12E-06,3.55E-06,5.94E-06,8.64E-06,1.10E-05,1.39E-05,1.59E-05,2.17E-05,2.28E-05,2.19E-05,2.08E-05,2.31E-05},
                                                {1.42E-08,7.78E-08,3.45E-07,1.07E-06,2.19E-06,3.15E-06,5.89E-06,7.56E-06,9.89E-06,1.23E-05,1.50E-05,1.83E-05,1.83E-05,1.72E-05,1.71E-05},
                                                {0.00E+00,1.44E-08,6.66E-08,3.14E-07,8.40E-07,1.53E-06,3.23E-06,4.86E-06,6.42E-06,8.86E-06,1.11E-05,1.49E-05,1.53E-05,1.47E-05,1.42E-05},
                                                {8.95E-09,5.95E-08,2.57E-07,9.37E-07,1.95E-06,3.08E-06,5.90E-06,8.04E-06,1.05E-05,1.26E-05,1.65E-05,2.01E-05,1.99E-05,1.90E-05,1.96E-05},
                                                {4.69E-08,1.70E-07,5.66E-07,1.72E-06,3.10E-06,5.02E-06,7.88E-06,1.01E-05,1.31E-05,1.51E-05,2.02E-05,2.21E-05,2.12E-05,2.03E-05,2.21E-05},
                                                {0.00E+00,1.90E-08,8.79E-08,3.93E-07,1.00E-06,1.76E-06,3.55E-06,5.19E-06,6.83E-06,9.33E-06,1.15E-05,1.50E-05,1.53E-05,1.47E-05,1.42E-05},
                                                {0.00E+00,1.19E-09,5.97E-09,3.55E-08,1.27E-07,3.30E-07,9.98E-07,2.01E-06,2.87E-06,4.19E-06,6.51E-06,1.03E-05,1.10E-05,1.11E-05,1.06E-05},
                                                {1.88E-09,1.81E-08,1.09E-07,4.17E-07,9.85E-07,1.71E-06,3.95E-06,5.84E-06,7.64E-06,9.96E-06,1.31E-05,1.79E-05,1.83E-05,1.72E-05,1.71E-05},
                                                {1.78E-08,9.42E-08,3.68E-07,1.21E-06,2.40E-06,3.61E-06,6.58E-06,8.59E-06,1.12E-05,1.34E-05,1.72E-05,2.03E-05,1.99E-05,1.90E-05,1.96E-05},
                                                {0.00E+00,2.71E-09,1.37E-08,7.54E-08,2.44E-07,5.55E-07,1.39E-06,2.47E-06,3.48E-06,4.91E-06,7.26E-06,1.06E-05,1.10E-05,1.11E-05,1.06E-05},
                                                {0.00E+00,0.00E+00,7.81E-10,3.40E-09,1.30E-08,3.36E-08,1.36E-07,3.39E-07,7.11E-07,1.08E-06,2.25E-06,4.43E-06,5.29E-06,6.25E-06,6.45E-06},
                                                {0.00E+00,2.78E-09,1.29E-08,8.42E-08,2.94E-07,6.74E-07,1.85E-06,3.32E-06,4.47E-06,6.52E-06,9.00E-06,1.43E-05,1.53E-05,1.47E-05,1.42E-05},
                                                {5.24E-09,3.79E-08,1.95E-07,6.71E-07,1.48E-06,2.33E-06,4.84E-06,6.66E-06,8.71E-06,1.11E-05,1.40E-05,1.81E-05,1.83E-05,1.72E-05,1.71E-05},
                                                {0.00E+00,0.00E+00,2.25E-09,9.78E-09,3.58E-08,8.45E-08,2.79E-07,5.37E-07,1.10E-06,1.55E-06,2.82E-06,4.64E-06,5.29E-06,6.25E-06,6.45E-06},
                                                {0.00E+00,0.00E+00,0.00E+00,4.40E-10,1.26E-09,2.76E-09,7.98E-09,1.70E-08,3.07E-08,5.12E-08,1.45E-07,3.26E-07,5.10E-07,6.45E-07,6.73E-07},
                                                {0.00E+00,3.18E-10,1.60E-09,1.07E-08,4.51E-08,1.45E-07,5.87E-07,1.44E-06,2.12E-06,3.25E-06,5.48E-06,9.90E-06,1.10E-05,1.11E-05,1.06E-05},
                                                {0.00E+00,9.40E-09,4.35E-08,2.24E-07,6.40E-07,1.24E-06,2.80E-06,4.41E-06,5.85E-06,8.18E-06,1.05E-05,1.48E-05,1.53E-05,1.47E-05,1.42E-05},
                                                {0.00E+00,0.00E+00,0.00E+00,1.09E-09,2.74E-09,5.24E-09,1.25E-08,2.27E-08,3.96E-08,6.37E-08,1.68E-07,3.38E-07,5.10E-07,6.45E-07,6.73E-07},
                                                {0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00},
                                                {0.00E+00,0.00E+00,2.85E-10,1.24E-09,4.93E-09,1.39E-08,6.83E-08,2.18E-07,4.67E-07,7.65E-07,1.82E-06,4.24E-06,5.29E-06,6.25E-06,6.45E-06},
                                                {0.00E+00,1.61E-09,8.09E-09,4.68E-08,1.62E-07,4.00E-07,1.13E-06,2.17E-06,3.08E-16,4.44E-06,6.78E-06,1.04E-05,1.10E-05,1.11E-05,1.06E-05},
                                                {0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00},
                                                {0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00}
                                           };

            return H;
        }

        public double[,] getMiddaySN()
        {
            double[,] SN = new double[40, 15] {
                                                {2.97E-07,8.14E-07,1.91E-06,3.65E-06,5.56E-06,8.00E-06,1.07E-05,1.35E-05,1.57E-05,1.81E-05,2.45E-05,2.98E-05,3.48E-05,4.04E-05,4.83E-05},
                                                {2.33E-07,6.62E-07,1.59E-06,3.10E-06,4.79E-06,6.95E-06,9.42E-06,1.19E-05,1.39E-05,1.61E-05,2.19E-05,2.68E-05,3.14E-05,3.68E-05,4.43E-05},
                                                {3.69E-07,9.47E-07,2.12E-06,3.93E-06,5.88E-06,8.32E-06,1.10E-05,1.38E-05,1.59E-05,1.83E-05,2.46E-05,2.99E-05,3.48E-05,4.04E-05,4.83E-05},
                                                {2.83E-07,7.69E-07,1.77E-06,3.34E-06,5.06E-06,7.23E-06,9.68E-06,1.21E-05,1.41E-05,1.63E-05,2.20E-05,2.69E-05,3.14E-05,3.68E-05,4.43E-05},
                                                {2.93E-07,8.15E-07,1.93E-06,3.72E-06,5.70E-06,8.22E-06,1.11E-05,1.39E-05,1.62E-05,1.87E-05,2.53E-05,3.08E-05,3.59E-05,4.16E-05,4.96E-05},
                                                {2.93E-07,8.06E-07,1.89E-06,3.63E-06,5.54E-06,7.98E-06,1.07E-05,1.35E-05,1.57E-05,1.81E-05,2.45E-05,2.98E-05,3.48E-05,4.04E-05,4.83E-05},
                                                {2.43E-07,6.82E-07,1.62E-06,3.15E-06,4.84E-06,7.01E-06,9.47E-06,1.20E-05,1.40E-05,1.61E-05,2.20E-05,2.68E-05,3.14E-05,3.68E-05,4.43E-05},
                                                {1.56E-07,4.68E-07,1.17E-06,2.34E-06,3.69E-06,5.44E-06,7.47E-06,9.55E-06,1.12E-05,1.31E-05,1.80E-05,2.21E-05,2.63E-05,3.12E-05,3.79E-05},
                                                {2.07E-07,6.29E-07,1.59E-06,3.21E-06,5.06E-06,7.47E-06,1.03E-05,1.31E-05,1.53E-05,1.78E-05,2.43E-05,2.97E-05,3.48E-05,4.04E-05,4.83E-05},
                                                {2.74E-07,7.77E-07,1.87E-06,3.63E-06,5.60E-06,8.12E-06,1.10E-05,1.38E-05,1.62E-05,1.86E-05,2.53E-05,3.08E-05,3.59E-05,4.16E-05,4.96E-05},
                                                {1.26E-07,4.02E-07,1.05E-06,2.18E-06,3.49E-06,5.23E-06,7.27E-06,9.37E-06,1.11E-05,1.29E-05,1.79E-05,2.21E-05,2.63E-05,3.12E-05,3.79E-05},
                                                {5.29E-08,1.96E-07,5.71E-07,1.28E-06,2.17E-06,3.39E-06,4.87E-06,6.44E-06,7.74E-06,9.17E-06,1.29E-05,1.63E-05,1.97E-05,2.39E-05,2.97E-05},
                                                {1.04E-07,3.75E-07,1.06E-06,2.34E-06,3.88E-06,5.99E-06,8.50E-06,1.11E-05,1.32E-05,1.55E-05,2.15E-05,2.66E-05,3.14E-05,3.68E-05,4.43E-05},
                                                {1.93E-07,6.00E-07,1.54E-06,3.14E-06,4.97E-06,7.38E-06,1.02E-05,1.30E-05,1.53E-05,1.77E-05,2.42E-05,2.97E-05,3.48E-05,4.04E-05,4.83E-05},
                                                {4.45E-08,1.74E-07,5.24E-07,1.21E-06,2.07E-06,3.28E-06,4.77E-06,6.34E-06,7.65E-06,9.10E-06,1.29E-05,1.62E-05,1.97E-05,2.39E-05,2.97E-05},
                                                {7.58E-09,4.28E-08,1.64E-07,4.58E-07,8.80E-07,1.54E-06,2.41E-06,3.40E-06,4.24E-06,5.20E-06,7.67E-06,9.99E-06,1.26E-05,1.59E-05,2.03E-05},
                                                {3.13E-08,1.50E-07,5.23E-07,1.34E-06,2.43E-06,4.04E-06,6.09E-06,8.29E-06,1.01E-05,1.21E-05,1.73E-05,2.18E-05,2.63E-05,3.12E-05,3.79E-05},
                                                {1.03E-07,3.71E-07,1.06E-06,2.33E-06,3.87E-06,5.97E-06,8.48E-06,1.11E-05,1.32E-05,1.55E-05,2.15E-05,2.66E-05,3.14E-05,3.68E-05,4.43E-05},
                                                {8.06E-09,4.42E-08,1.70E-07,4.68E-07,8.94E-07,1.55E-06,2.43E-06,3.42E-06,4.25E-06,5.21E-06,7.68E-06,1.00E-05,1.26E-05,1.59E-05,2.03E-05},
                                                {0.00E+00,2.70E-09,1.80E-08,7.47E-08,1.83E-07,3.91E-07,7.24E-07,1.15E-06,1.53E-06,2.00E-06,3.21E-06,4.47E-06,6.03E-06,8.14E-06,1.10E-05},
                                                {5.14E-09,3.78E-08,1.78E-07,5.69E-07,1.18E-06,2.20E-06,3.62E-06,5.25E-06,6.63E-06,8.22E-06,1.22E-05,1.59E-05,1.97E-05,2.39E-05,2.97E-05},
                                                {4.19E-08,1.85E-07,6.05E-07,1.48E-06,2.62E-06,4.26E-06,6.32E-06,8.51E-06,1.03E-05,1.23E-05,1.74E-05,2.19E-05,2.63E-05,3.12E-05,3.79E-05},
                                                {0.00E+00,3.84E-09,2.31E-08,8.90E-08,2.08E-07,4.29E-07,7.72E-07,1.20E-06,1.58E-06,2.05E-06,3.25E-06,4.49E-06,6.03E-06,8.14E-06,1.10E-05},
                                                {0.00E+00,1.08E-11,2.18E-10,2.06E-09,8.30E-09,2.70E-08,6.99E-08,1.41E-07,2.17E-07,3.22E-07,6.14E-07,9.77E-07,1.52E-06,2.36E-06,3.60E-06},
                                                {4.73E-10,5.95E-09,4.10E-08,1.74E-07,4.28E-07,9.16E-07,1.69E-06,2.66E-06,3.53E-06,4.56E-06,7.15E-06,9.74E-06,1.26E-05,1.59E-05,2.03E-05},
                                                {1.20E-08,6.87E-08,2.72E-07,7.65E-07,1.47E-06,2.57E-06,4.03E-06,5.66E-06,7.02E-06,8.55E-06,1.25E-05,1.60E-05,1.97E-05,2.39E-05,2.97E-05},
                                                {0.00E+00,4.01E-11,5.53E-10,3.94E-09,1.35E-08,3.81E-08,8.86E-08,1.66E-07,2.46E-07,3.52E-07,6.43E-07,9.94E-07,1.52E-06,2.36E-06,3.60E-06},
                                                {0.00E+00,0.00E+00,3.07E-15,2.12E-13,2.88E-12,2.61E-11,1.55E-10,5.66E-10,1.26E-09,2.58E-09,7.67E-09,1.74E-08,4.03E-08,9.44E-08,2.04E-07},
                                                {0.00E+00,3.37E-10,4.13E-09,2.68E-08,8.51E-08,2.26E-07,4.97E-07,8.86E-07,1.26E-06,1.74E-06,2.98E-06,4.35E-06,6.03E-06,8.14E-06,1.10E-05},
                                                {1.99E-09,1.64E-08,8.43E-08,2.87E-07,6.22E-07,1.20E-06,2.03E-06,3.02E-06,3.88E-06,4.88E-06,7.41E-06,9.87E-06,1.26E-05,1.59E-05,2.03E-05},
                                                {0.00E+00,0.00E+00,3.05E-14,1.05E-12,9.52E-12,6.13E-11,2.78E-10,8.47E-10,1.70E-09,3.20E-09,8.60E-09,1.81E-08,4.03E-08,9.44E-08,2.04E-07},
                                                {0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00},
                                                {0.00E+00,1.34E-12,4.98E-11,7.34E-10,3.85E-09,1.56E-08,4.79E-08,1.09E-07,1.79E-07,2.80E-07,5.70E-07,9.51E-07,1.52E-06,2.36E-06,3.60E-06},
                                                {0.00E+00,1.58E-09,1.23E-08,5.73E-08,1.50E-07,3.40E-07,6.57E-07,1.07E-06,1.46E-06,1.93E-06,3.15E-06,4.43E-06,6.03E-06,8.14E-06,1.10E-05},
                                                {0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00},
                                                {0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00},
                                                {0.00E+00,0.00E+00,3.42E-16,4.58E-14,9.21E-13,1.15E-11,8.83E-11,3.86E-10,9.40E-10,2.09E-09,6.87E-09,1.67E-08,4.03E-08,9.44E-08,2.04E-07},
                                                {0.00E+00,1.75E-11,3.07E-10,2.61E-09,9.91E-09,3.06E-08,7.62E-08,1.49E-07,2.27E-17,3.33E-07,6.25E-07,9.84E-07,1.52E-06,2.36E-06,3.60E-06},
                                                {0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00},
                                                {0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00,0.00E+00}
                                              };

            return SN;
        }

        public int[] getLat()
        {
            int[] lat = new int[40] {0, 0, 0, 0, 10, 10, 10, 10, 20, 20, 20, 20, 30, 30, 30, 30, 40, 40, 40, 40, 50, 50, 50, 50,
                                     60, 60, 60, 60, 70, 70, 70, 70, 80, 80, 80, 80, 90, 90, 90, 90 };
            return lat;
        }

        public string[] getSeasons()
        {
            string[] Seasons = new string[40] {"SPRING", "SUMMER", "FALL", "WINTER", "SPRING", "SUMMER", "FALL", "WINTER",
                                               "SPRING", "SUMMER", "FALL", "WINTER", "SPRING", "SUMMER", "FALL", "WINTER",
                                               "SPRING", "SUMMER", "FALL", "WINTER", "SPRING", "SUMMER", "FALL", "WINTER",
                                               "SPRING", "SUMMER", "FALL", "WINTER", "SPRING", "SUMMER", "FALL", "WINTER",
                                               "SPRING", "SUMMER", "FALL", "WINTER", "SPRING", "SUMMER", "FALL", "WINTER"};
            return Seasons;
        }


        /// <summary>
        /// This routine performs units conversion for the solar 
        /// intensities and computes intensity values for 
        /// additional wave lengths. It converts solar intensity in terms of 
        /// watts/cm**2/nm to photons/cm**2/nm/sec.
        /// </summary>
        /// <param name="x"></param> array of 15 intensity values in units of watts/cm**2/nm
        /// <param name="y"></param> array of 17 intensity values given in photons/cm**2/nm/sec
        /// <param name="minwav"></param>
        /// <param name="maxwav"></param>
        public void convert(double[] x, double[] y, int minwav, int maxwav)
        {

            //
            // Method to perform units conversion for the solar intensities and to compute
            // intensity values for additional wave lengths. 
            // Solar intensity values were recorded in units of watts/cm**2/nm in 
            // Bener's report. These data were converted to photons/ cm**2/nm/sec by 
            // the following equation:
            // I(photons/cm**2/nm/sec) = I(watts/cm**2/nm) * Lambda(nm) * 5.035E+15.
            // where Lambda(nm) represents the wavelength in nm. The constant is derived 
            // from the following equation:
            // E(energy) = h * c / Lambda where h = 6.6256E-34 joule sec
            // c = 2.99792E+17 nm/sec substituting for h and c gives 
            // E = 19.86E-17 / Lambda(nm) joules/photon
            // so, since 1 watt = 1 joule/sec, it follows that 1 watt corresponds to 
            // Lambda(nm)/1.986E-16 or Lambda(nm) * 5.035E+15 photons/sec.
            //

            int i17 = 17;
            int i18 = 18;
            int i19 = 19;
            int i20 = 20;
            int i21 = 21;
            int i22 = 22;
            int i23 = 23;
            int i24 = 24;

            // +++++
            //
            //  Conversion factors
            // E330 = 330 * 5.035E15 * 10.0       
            // E340 = 340 * 5.035E15 * 10.0      
            // E350 = 350 * 5.035E15 * 10.0 
            // E360 = 360 * 5.035E15 * 10.0 
            // E370 = 370 * 5.035E15 * 10.0 
            // E380 = 380 * 5.035E15 * 10.0 
            // E125 = 5.035E15 * 2.5

            double e330 = 1.66155e19;
            double e340 = 1.7119e19;
            double e350 = 1.76225e19;
            double e360 = 1.8126e19;
            double e370 = 1.86295e19;
            double e380 = 1.9133e19;
            double e5035 = 5.035e15;
            double e125 = 1.2587e16;

            double[] wave = new double[18] { 280.0, 282.5, 285.0, 287.5, 290.0, 292.5, 295.0, 297.5, 300.0,
                                            302.5, 305.0, 307.5, 310.0, 312.5, 315.0, 317.5, 320.0, 323.1 };
            int n = 17;

            if (maxwav < 17) n = maxwav;

            for (int i = minwav; i <= n; i++)
            {
                y[i - 1] = x[i - 1] * wave[i - 1] * e125;
            }


            if (maxwav >= 18)
            {
                //
                //  Special conversion for the remainder of the intervals.
                //
                y[i18 - 1] = (1.875 * x[i17 - 1] + 3.125 * x[i18 - 1]) / 5.0 * e5035 * wave[i18 - 1] * 3.75;
                y[i19 - 1] = (x[i18 - 1] + x[i19 - 1] + (x[i19 - 1] + x[i20 - 1]) / 2.0) / 3.0 * e330;
                y[i20 - 1] = x[i20 - 1] * e340;
                y[i21 - 1] = (x[i20 - 1] + x[i21 - 1]) / 2.0 * e350;
                y[i22 - 1] = x[i21 - 1] * e360;
                y[i23 - 1] = (x[i21 - 1] + x[i22 - 1]) / 2.0 * e370;
                y[i24 - 1] = x[i22 - 1] * e380;
            }

        }

        /// <summary>
        /// Method to perform computation of the solar intensities over pre-defined
        /// wavelength intervals. Solar intensity values were recorded in units of
        /// watts/cm**2/nm in Bener's report.
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="minwav"></param>
        /// <param name="maxwav"></param>
        public void computeSolarIntensityOverInterval(double[] x, double[] y, int minwav, int maxwav)
        {
            int i17 = 17;
            int i18 = 18;
            int i19 = 19;
            int i20 = 20;
            int i21 = 21;
            int i22 = 22;
            int i23 = 23;
            int i24 = 24;

            //
            //  Lambda * interval width
            // E330 = 330 * 10.0       
            // E340 = 340 * 10.0      
            // E350 = 350 * 10.0 
            // E360 = 360 * 10.0 
            // E370 = 370 * 10.0 
            // E380 = 380 * 10.0 
            // E125 = 5.035E15 * 2.5

            double e330 = 3.3e03;
            double e340 = 3.4e03;
            double e350 = 3.5e03;
            double e360 = 3.6e03;
            double e370 = 3.7e03;
            double e380 = 3.8e03;

            double e125 = 2.5;

            double[] wave = new double[18] { 280.0, 282.5, 285.0, 287.5, 290.0, 292.5, 295.0, 297.5, 300.0,
                                            302.5, 305.0, 307.5, 310.0, 312.5, 315.0, 317.5, 320.0, 323.1 };
            int n = 17;

            if (maxwav < 17) n = maxwav;

            for (int i = minwav; i <= n; i++)
            {
                y[i - 1] = x[i - 1] * wave[i - 1] * e125;
            }


            if (maxwav >= 18)
            {
                //
                //  Special computation for the remainder of the intervals.
                //
                y[i18 - 1] = (1.875 * x[i17 - 1] + 3.125 * x[i18 - 1]) / 5.0 * wave[i18 - 1] * 3.75;
                y[i19 - 1] = (x[i18 - 1] + x[i19 - 1] + (x[i19 - 1] + x[i20 - 1]) / 2.0) / 3.0 * e330;
                y[i20 - 1] = x[i20 - 1] * e340;
                y[i21 - 1] = (x[i20 - 1] + x[i21 - 1]) / 2.0 * e350;
                y[i22 - 1] = x[i21 - 1] * e360;
                y[i23 - 1] = (x[i21 - 1] + x[i22 - 1]) / 2.0 * e370;
                y[i24 - 1] = x[i22 - 1] * e380;
            }

        }

        /// <summary>
        /// DINTPT calculates an approximation for an integral on the basis of points
        /// supplied by using cubic interpolation and gaussian quadrature.
        /// </summary>
        /// <param name="n"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="errorMsg"></param>
        /// <returns></returns>

        public double dintpt(int n, double[] x, double[] y, out string errorMsg)
        {
            //***********************************************************************
            //  Dintpt calculates an approximation for an integral on the basis of po
            //  supplied by using cubic interpolation and gaussian quadrature
            //
            //  Input parameters:
            //    n  =  number of points input (must have  n > 2  and  n < 101)
            //    x  =  single precision array of abscissas
            //    y  =  single precision array of ordinates
            //
            //***********************************************************************
            //

            errorMsg = "";
            double[] dx = new double[100];
            double[] dy = new double[100];

            double[] dc = new double[7] { -0.949107912342759, -0.741531185599394, -0.405845151377397, 0.0,
                                           0.405845151377397,  0.741531185599394,  0.949107912342759 };

            double[] dw = new double[7] { 0.129484966168870, 0.279705391489277, 0.381830050505119,
                                          0.417959183673469, 0.381830050505119, 0.279705391489277,
                                          0.129484966168870 };

            double dalf;
            double dbet;
            double dxx;
            double dgc;

            //
            // Ngpts = number of gaussian points to be used
            // dc = gaussian points,  dw = gaussian weights
            //
            int ngpts = 7;

            int nip = 4;

            //
            double dsum = 0.0;
            if (n < 3 || n > 100)
            {
                errorMsg = "Invalid input in dintpt." + n;
                return 0.0d;
            }

            for (int i = 0; i < n; i++)
            {
                dx[i] = x[i];
                dy[i] = y[i];
            }

            if (n == 3) nip = 3;

            dalf = 0.5 * (dx[0] + dx[n - 1]);
            dbet = 0.5 * (dx[n - 1] - dx[0]);

            for (int i = 0; i < ngpts; i++)
            {
                dxx = dbet * dc[i] + dalf;
                dgc = dbet * dintrp(n, dx, dy, dxx, nip, out errorMsg);
                if (errorMsg != "") return 0.0d;
                dsum = dsum + dw[i] * dgc;
            }

            return dsum;

        }

        /// <summary>
        /// This method appear to perform some kind of interpolation.
        /// </summary>
        /// <param name="nn"></param>
        /// <param name="dx"></param>
        /// <param name="dy"></param>
        /// <param name="dxx"></param>
        /// <param name="mmm"></param>
        /// <param name="errorMsg"></param>
        /// <returns></returns>
        public double dintrp(int nn, double[] dx, double[] dy, double dxx, int mmm, out string errorMsg)
        {
            errorMsg = "";
            bool flag1 = false;
            bool flag2 = false;
            double[] dvd = new double[20];
            double dw;
            double dl;
            double result;
            double dz = 0.0;
            double deps = 1.0e-12;
            double d5 = 0.5;
            int mm;

            result = dz;
            int m = mmm;
            int n = nn;

            //  Check for valid parameters.
            if (dxx < (dx[0] - deps))
            {
                errorMsg = "Invalid argument in dintrp.";
                return result;
            }

            if (m < 2 || m > 20 || nn < 2)
            {
                errorMsg = "Dxx is outside table.";
                return result;
            }

            //
            //*********************************************
            //
            int l = 1;

            if ((nn > m) && (nn > 15))
            {
                if (dxx > (dx[n - 1] + deps))
                {
                    errorMsg = "Dxx is outside table.";
                    return result;
                }
                l = n;
                if (Math.Abs(dxx - dx[n - 1]) < deps)
                {
                    result = dy[l - 1];
                    return result;
                }
                if (m != n)
                {
                    dw = n;
                    dw = dw * d5;
                    dl = dw;
                    l = n / 2;
                    dw = d5 * dw;
                    if (Math.Abs(dxx - dx[l - 1]) < deps)
                    {
                        result = dy[l - 1];
                        return result;
                    }

                    while (dw >= d5)
                    {
                        if (dxx > dx[l - 1])
                        {
                            dl = dl + dw;
                        }
                        else
                        {
                            dl = dl - dw;
                        }

                        l = (int)dl;

                        dw = d5 * dw;

                        if (Math.Abs(dxx - dx[l - 1]) < deps)
                        {
                            result = dy[l - 1];
                            return result;
                        }
                    }

                    while (dx[l - 1] >= dxx)
                    {
                        l = l - 1;

                        if (l <= 0)
                        {
                            errorMsg = "Two arguments are equal.";
                            result = 0.0;
                            return result;
                        }
                    }

                    l = l - m / 2 + 1;
                    if (l <= 0) l = 1;
                    if (l > (n - m + 1)) l = n - m + 1;
                    mm = m - 1;
                    divdif(dx, dy, l, m, ref dvd, out errorMsg);
                    if (errorMsg != "")
                    {
                        result = 0.0;
                        return result;
                    }
                    result = display(dvd, mm, dxx, dx, l, out errorMsg);
                    if (errorMsg != "")
                    {
                        result = 0.0;
                        return result;
                    }
                    return result;
                }
                else
                {
                    l = 1;
                    mm = m - 1;
                    divdif(dx, dy, l, m, ref dvd, out errorMsg);
                    if (errorMsg != "")
                    {
                        result = 0.0;
                        return result;
                    }
                    result = display(dvd, mm, dxx, dx, l, out errorMsg);
                    if (errorMsg != "")
                    {
                        result = 0.0;
                        return result;
                    }
                    return result;
                }
            }
            else if (nn <= m)
            {
                m = nn;
                mm = m - 1;
                divdif(dx, dy, l, m, ref dvd, out errorMsg);
                if (errorMsg != "")
                {
                    result = 0.0;
                    return result;
                }
                result = display(dvd, mm, dxx, dx, l, out errorMsg);
                if (errorMsg != "")
                {
                    result = 0.0;
                    return result;
                }
                return result;
            }
            else if (nn <= 15)
            {
                l = 1;
                do
                {
                    if (Math.Abs(dxx - dx[l - 1]) < deps)
                    {
                        flag1 = true;
                        break;
                    }
                    if (dxx < dx[l - 1])
                    {
                        flag2 = true;
                        break;
                    }
                    l = l + 1;
                }
                while (l <= n);

                if (flag1)
                {
                    result = dy[l - 1];
                    return result;
                }
                else if (flag2)
                {
                    l = l - 1;
                    l = l - m / 2 + 1;
                    if (l <= 0) l = 1;
                    if (l > (n - m + 1)) l = n - m + 1;
                    mm = m - 1;
                    divdif(dx, dy, l, m, ref dvd, out errorMsg);
                    if (errorMsg != "")
                    {
                        result = 0.0;
                        return result;
                    }
                    result = display(dvd, mm, dxx, dx, l, out errorMsg);
                    if (errorMsg != "")
                    {
                        result = 0.0;
                        return result;
                    }
                    return result;
                }
                else
                {
                    errorMsg = "dxx outside table.";
                    result = 0.0;
                    return result;
                }

            }

            return result;
        }


        /// <summary>
        /// This method performs a numerical calculation for a slope.
        /// </summary>
        /// <param name="dc"></param>
        /// <param name="dy"></param>
        /// <param name="np"></param>
        /// <param name="dvd"></param>
        /// <param name="errorMsg"></param>
        public void divdif(double[] dc, double[] dy, int l, int np, ref double[] dvd, out string errorMsg)
        {
            errorMsg = "";
            int n;
            int kp;
            int lm1 = l - 1;
            double divs;
            if (dvd == null)
            {
                dvd = new double[20];
            }

            if (np < 2 || np > 60)
            {
                errorMsg = "Number of points in divdif is invalid: " + np + ".";
                return;
            }

            for (int j = 0; j < np; j++)
            {
                dvd[j] = dy[j + lm1];
            }

            n = np - 1;

            for (int k = 1; k <= n; k++)
            {
                kp = k + 1;
                for (int j = kp; j <= np; j++)
                {
                    divs = dc[j - 1 + lm1] - dc[k - 1 + lm1];
                    if (Math.Abs(divs) < 1.0e-14)
                    {
                        errorMsg = "Two arguments are equal.";
                        return;
                    }
                    dvd[j - 1] = (dvd[j - 1] - dvd[k - 1]) / divs;
                }
            }

            return;
        }

        /// <summary>
        /// This method performs some kind of linear interpolation.
        /// </summary>
        /// <param name="a"></param>
        /// <param name="n"></param>
        /// <param name="dx"></param>
        /// <param name="c"></param>
        /// <param name="errorMsg"></param>
        /// <returns></returns>
        public double display(double[] a, int n, double dx, double[] c, int l, out string errorMsg)
        {
            errorMsg = "";
            int nx;
            int lm1 = l - 1;
            double dsply;

            if (n < 1 || n > 100)
            {
                errorMsg = "Error in display.";
                dsply = 0.0;
                return dsply;
            }

            dsply = a[n];

            for (int i = 1; i <= n; i++)
            {
                nx = n - i + 1;
                dsply = dsply * (dx - c[nx - 1 + lm1]) + a[nx - 1];
            }

            return dsply;

        }

        /// <summary>
        /// This routine computes h and sn intensity values for the visible spectrum: 390-800 nm.
        /// </summary>
        /// <param name="ozamt"></param>
        /// <param name="solalt"></param>
        /// <param name="wav"></param>
        /// <param name="h"></param>
        /// <param name="sn"></param>
        /// <param name="err"></param>
        public void tslam(double ozamt, double solalt, double wav, out double h, out double sn, out string err)
        {
            err = "";

            double[] iol = new double[22] { 2.2, 3.1, 4.01, 4.06, 3.86, 4.5, 5.0, 5.0, 5.14, 5.22, 4.91,
                                            4.98, 5.21, 5.4, 5.46, 5.47, 5.38, 5.30, 5.2, 5.08, 4.8, 4.55 };

            double[] alphal = new double[22] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.7, 1.0,
                                                1.3, 2.3, 3.6, 5.2, 5.4, 4.1, 2.8, 1.7, 0.9, 0.4, 0.0 };

            double[] sa = new double[10] { 5.0, 10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0 };

            double[] smlam = new double[22] { 0.175, .158, 0.142, 0.129, 0.117, 0.106, 0.0969, 0.0885,
                                                0.0810, 0.0743, 0.0687, 0.0628, 0.0515, 0.0426, 0.0356,
                                                0.0299, 0.0253, 0.0216, 0.0185, 0.0160, 0.0121, 0.0093 };

            double degrad = 1.745329e-2;
            bool flag1 = false;
            bool flag2 = false;
            int i = 0;
            int isa;
            int iwave;
            h = -99.0;
            sn = -99.0;

            double lam;
            double arg;
            double sin2;
            double misa;
            double tmlam;
            double tplam;
            double tslamd;
            double temp1;
            double tallam;
            double cosarg;
            double tiolco;


            //
            // Determine wavelength.
            //
            double[] wave = getWave();

            for (int j = 25; j <= 46; j++)
            {
                if (wav == wave[j - 1])
                {
                    flag1 = true;
                    i = j;
                    break;
                }
            }

            if (flag1 == false)
            {
                err = "Wave value not found in wave array.";
                return;
            }

            iwave = i - 24;
            lam = wave[i - 1] / 1000.0;

            //
            // Determine solar altitude.
            //
            for (int j = 1; j <= 10; j++)
            {
                if (solalt == sa[j - 1])
                {
                    flag2 = true;
                    i = j;
                    break;
                }
            }

            if (flag2 == false)
            {
                err = "Solar altitude was not found in SA array.";
                return;
            }

            //
            // Determine solar altitude subscript.
            //
            isa = i;
            arg = (90.0 - solalt) * degrad;
            sin2 = Math.Sin(arg);
            sin2 = sin2 * sin2;
            misa = Math.Sqrt(1.0 - sin2 / 1.001787);
            misa = 1.0 / misa;

            tmlam = Math.Pow(10.0, -(smlam[iwave - 1] * 0.987 * misa));
            tplam = Math.Pow(10.0, -((7.5e-3 * Math.Pow(lam, -2) + 3.5e-2 * Math.Pow(lam, -0.75)) * misa));
            tslamd = tmlam * tplam;

            //
            // Adjust the value alphal by 1.e-3.
            //
            temp1 = alphal[iwave - 1] * ozamt * misa * 1.0e-3;
            tallam = Math.Pow(10.0, -temp1 * 10.0);
            cosarg = Math.Cos(arg);

            //
            // Adjust the value of iol by 1.e15.
            //
            tiolco = tallam * iol[iwave - 1] * cosarg * 1.0e15;
            sn = tslamd * tiolco;
            h = 0.5 * (1.0 - tslamd) * tiolco;

        }

        /// <summary>
        /// This method is used to compute local time of day as a function of solar zenith angle, latitude, longitude, 
        /// and ephemeride data. Alternatively, the time of day for solar noon and its corresponding 
        /// solar zenith angle can be computed.
        /// </summary>
        /// <param name="theta"></param>
        /// <param name="theta1"></param>
        /// <param name="x"></param>
        /// <param name="ut"></param>
        /// <param name="xlat"></param>
        /// <param name="xlon"></param>
        /// <param name="zz"></param>
        public void timeofDay(out double theta, double theta1, double[] x, out double[] ut, double xlat, double xlon, double zz)
        {
            /*
            *  This routine computes the local times of day for
            *  for a given solar zenith angle, latitude, longitude,
            *  and ephemeride data. alternatively, the solar
            *  zenith angle and time-of-day for solar noon can
            *  be found.
            */

            theta = 0.0;
            ut = new double[2];

            int x1 = 1;
            int x2 = 2;
            int x3 = 3;
            int x4 = 4;
            int x5 = 5;
            int x6 = 6;
            int x7 = 7;
            int x8 = 8;
            int x9 = 9;

            double rtd = 57.29578;
            double bd;
            double decu;
            double rash;
            double sidt;
            double decd;
            double dld2;
            double sld2;
            double sdld2;
            double cdld2;
            double ssld2;
            double csld2;
            double temp;
            double temp1;
            double temp3;
            double temp4;
            double ql;
            int lon;
            double timdif;

            //
            // Convert declination given in degrees, minutes and seconds to degrees 
            // with a decimal fraction.
            //
            decu = x[x1 - 1] + (x[x2 - 1] * 60.0 + x[x3 - 1]) / 3600.0;
            if (x[x1 - 1] < 0.0) decu = x[x1 - 1] - (x[x2 - 1] * 60.0 + x[x3 - 1]) / 3600.0;

            //
            // Do the same for the right ascension data.
            //
            rash = x[x4 - 1] + (x[x5 - 1] * 60.0 + x[x6 - 1]) / 3600.0;

            //
            // Do the same for the sidreal time.
            //
            sidt = x[x7 - 1] + (x[x8 - 1] * 60.0 + x[x9 - 1]) / 3600.0;
            decd = decu;

            //
            //  If zz eq 0, then do only solar noon computations.
            //
            if (zz != 0.0)
            {
                //
                // Comes here for non-solar noon computations.
                //
                dld2 = (xlat - decd) / (2.0 * rtd);
                sld2 = (xlat + decd) / (2.0 * rtd);
                sdld2 = Math.Sin(dld2);
                cdld2 = Math.Cos(dld2);
                ssld2 = Math.Sin(sld2);
                csld2 = Math.Cos(sld2);
                ql = Math.Tan(theta1 / (2.0 * rtd));
                temp = sdld2 * sdld2 - ql * ql * cdld2 * cdld2;
                temp1 = ql * ql * ssld2 * ssld2 - csld2 * csld2;
                temp3 = temp / temp1;
                temp4 = 0.0;
                if (temp3 != 0.0) temp4 = Math.Sqrt(Math.Abs(temp3));
                bd = Math.Atan(temp4) * rtd;

            }
            else
            {
                //
                // Compute the solar zenith angle for solar noon.
                //
                theta = xlat - decd;
                if (theta < 0.0) theta = -theta;

                //
                // The 'bd' term goes to zero for these computations.
                //
                bd = 0.0;

            }

            //
            // Compute the time zone difference.
            // modified 14-nov-81.
            // The time zones are centered on the 15 minute lines of
            // longitude around the globe, i.e. for the prime meridian
            // the time offset is 0 for the range 7.5 deg east long to
            // 7.5 deg west long.
            // A positive entry for the longitude is considered to
            // be a west long and a negative entry is for east long.
            //
            temp = Math.Abs(xlon);
            lon = (int)((temp - 7.5) / 15.0 + 1.0);
            timdif = lon;
            if (xlon >= 0.0) timdif = -timdif;

            //
            // Compute the universal times, morning and evening.
            //
            ut[1] = (bd - 7.55 * sidt + 7.5 * rash + xlon / 2.0) / 7.52053425;
            ut[0] = (-bd - 7.55 * sidt + 7.5 * rash + xlon / 2.0) / 7.52053425;

            //
            // If the sideral time is greater than the right ascension,
            // a 24-hour correction is necessary.
            //
            if (sidt > rash) timdif = timdif + 24.0;

            //
            // Incorporate the time zone corrections.
            //
            ut[0] = ut[0] + timdif;
            ut[1] = ut[1] + timdif;

        }

        /// <summary>
        /// This method assigns user-entered parameters to their corresponding variables in the
        /// code.
        /// </summary>
        /// <param name="Name"></param>
        /// <param name="Longitude"></param>
        /// <param name="Ozone"></param>
        /// <param name="Q"></param>
        /// <param name="Deltaz"></param>
        /// <param name="Elevation"></param>
        /// <param name="InitDepth"></param>
        /// <param name="FinalDepth"></param>
        /// <param name="DepthIncr"></param>
        /// <param name="RefractiveI"></param>
        /// <param name="t1"></param>
        /// <param name="t2"></param>
        /// <param name="t3"></param>
        /// <param name="t4"></param>
        /// <param name="t5"></param>
        /// <param name="t6"></param>
        /// <param name="t7"></param>
        /// <param name="t8"></param>
        /// <param name="t9"></param>
        /// <param name="lat"></param>
        public void ProcessInputData(string Name, string Longitude, string Ozone, string Q,
                                            bool doDepthPoint, string Deltaz, string Elevation, string InitDepth,
                                            string FinalDepth, string DepthIncr, string RefractiveI,
                                            string t1, string t2, string t3, string t4,
                                            string t5, string t6, string t7, string t8,
                                            string t9, string lat)
        {

            if (!string.IsNullOrWhiteSpace(Name)) contaminantName = Name;

            if (string.IsNullOrWhiteSpace(Longitude))
            {
                xlon = 0;
            }
            else
            {
                xlon = Convert.ToDouble(Longitude.Trim());
            }


            if (!string.IsNullOrWhiteSpace(Ozone))
            {
                double ozoneLayer = Convert.ToDouble(Ozone.Trim());
                if (ozoneLayer > 0.0)
                {
                    aveozo = ozoneLayer;
                    ioz = 1;
                }
                else
                {
                    ioz = 0;
                }
            }

            if (!string.IsNullOrWhiteSpace(Q))
            {
                q = Convert.ToDouble(Q.Trim());
            }

            if (doDepthPoint)
            {
                deltaz = Convert.ToDouble(Deltaz.Trim());
                useDeltaz = true;
            }
            else
            {
                deltaz = 0.0;
                useDeltaz = false;
            }

            if (!string.IsNullOrWhiteSpace(Elevation))
            {
                elevation = Convert.ToDouble(Elevation);
            }

            if (!string.IsNullOrWhiteSpace(DepthIncr))
            {
                dinc = Convert.ToDouble(DepthIncr);
            }

            if (!string.IsNullOrWhiteSpace(FinalDepth))
            {
                dfinal = Convert.ToDouble(FinalDepth);
            }

            if (!string.IsNullOrWhiteSpace(InitDepth))
            {
                dinit = Convert.ToDouble(InitDepth);
            }

            if (!string.IsNullOrWhiteSpace(RefractiveI))
            {
                musubr = Convert.ToDouble(RefractiveI);
            }

            xx[0] = Convert.ToDouble(t1);
            xx[1] = Convert.ToDouble(t2);
            xx[2] = Convert.ToDouble(t3);
            xx[3] = Convert.ToDouble(t4);
            xx[4] = Convert.ToDouble(t5);
            xx[5] = Convert.ToDouble(t6);
            xx[6] = Convert.ToDouble(t7);
            xx[7] = Convert.ToDouble(t8);
            xx[8] = Convert.ToDouble(t9);
            typlat = Convert.ToDouble(lat);
            ityp = 1;
            ilatsw = 1;
        }

        /// <summary>
        /// This method stores input values into their coresponding global variables.
        /// </summary>
        /// <param name="Minwave"></param>
        /// <param name="Maxwave"></param>
        /// <param name="Longitude"></param>
        /// <param name="Ozone"></param>
        /// <param name="Q"></param>
        /// <param name="Deltaz"></param>
        /// <param name="Elevation"></param>
        /// <param name="InitDepth"></param>
        /// <param name="FinalDepth"></param>
        /// <param name="DepthIncr"></param>
        public void ProcessInputData(string Name, string Longitude, bool dOzone, string Ozone, string Q,
                                            bool doDepthPoint, string Deltaz, string Elevation, string InitDepth,
                                            string FinalDepth, string DepthIncr, string RefractiveI)
        {

            if (!string.IsNullOrWhiteSpace(Name)) contaminantName = Name;

            if (string.IsNullOrWhiteSpace(Longitude))
            {
                xlon = 0;
            }
            else
            {
                xlon = Convert.ToDouble(Longitude.Trim());
            }

            if (dOzone)
            {
                aveozo = -1.0;
                ioz = 0;
            }
            else
            {
                double ozoneLayer = Convert.ToDouble(Ozone.Trim());
                aveozo = ozoneLayer;
                ioz = 1;
            }

            if (!string.IsNullOrWhiteSpace(Q))
            {
                q = Convert.ToDouble(Q.Trim());
            }

            if (doDepthPoint)
            {
                deltaz = Convert.ToDouble(Deltaz.Trim());
                useDeltaz = true;
            }
            else
            {
                deltaz = 0.0;
                useDeltaz = false;
            }

            if (!string.IsNullOrWhiteSpace(Elevation))
            {
                //Bener bn1 = new Bener();
                //bn1.Elevation = Convert.ToDouble(Elevation);
                elevation = Convert.ToDouble(Elevation);
            }

            if (!string.IsNullOrWhiteSpace(DepthIncr))
            {
                dinc = Convert.ToDouble(DepthIncr);
            }

            if (!string.IsNullOrWhiteSpace(FinalDepth))
            {
                dfinal = Convert.ToDouble(FinalDepth);
            }

            if (!string.IsNullOrWhiteSpace(InitDepth))
            {
                dinit = Convert.ToDouble(InitDepth);
            }

            if (!string.IsNullOrWhiteSpace(RefractiveI))
            {
                musubr = Convert.ToDouble(RefractiveI);
            }
        }

        /// <summary>
        /// This method generates a table containing the wavelengths and water and contaminant
        /// absorption coefficients stored in the program.
        /// </summary>
        /// <param name="dt"></param>
        public void Listing(out DataTable dt)
        {
            dt = new DataTable();
            double[] wave = getWave();
            double[] abwat = getAbwat();
            double[] eppest = null;

            if (contaminantType == "Chemical")
            {
                eppest = getEppest();
            }
            if (contaminantType == "Biological")
            {
                eppest = getAbsBiological();
            }

            string contaminant = contaminantType.Trim() + " " + contaminantUnits.Trim();
            DataRow dr1 = null;
            dt.Columns.Add(wavelengthName);
            dt.Columns.Add(waterNameUnits);
            dt.Columns.Add(contaminant);

            //int minwav = minwav;
            //int maxwav = maxwav;


            for (int i = minwav; i <= maxwav; i++)
            {
                dr1 = dt.NewRow();
                dr1[wavelengthName] = wave[i - 1].ToString("F2", CultureInfo.InvariantCulture);
                // Multiply water attenuation coefficients by 100 to convert units from
                // cm^-1 to m^-1.
                double absorpWater = abwat[i - 1] * 100.0;
                dr1[waterNameUnits] = absorpWater.ToString("F6", CultureInfo.InvariantCulture);
                dr1[contaminant] = eppest[i - 1].ToString("F6", CultureInfo.InvariantCulture);
                dt.Rows.Add(dr1);
            }
        }

        /// <summary>
        /// This method generates a table of the latitudes stored in the program.
        /// </summary>
        /// <param name="dt"></param>
        public void Latitudes(out DataTable dt)
        {
            dt = new DataTable();
            DataRow dr1 = null;
            dt.Columns.Add("Latitude index");
            dt.Columns.Add("Latitude");

            for (int i = 0; i < ilatsw; i++)
            {
                dr1 = dt.NewRow();
                dr1["Latitude index"] = i + 1;
                dr1["Latitude"] = ilattm[i];
                dt.Rows.Add(dr1);
            }
        }

    }
}
