<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Web.Services</name>
    </assembly>
    <members>
        <member name="T:Web.Services.Controllers.AQTAnimalsInputExample">
            <summary>
            AQUATOX Animals input example.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.AQTAnimalsInputExample.GetExamples">
            <summary>
            Get Example.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSAQTAnimalsController">
            <summary>
            AQUATOX animals controller for HMS.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSAQTAnimalsController.POST(Newtonsoft.Json.Linq.JObject)">
            <summary>
            POST method for running AQUATOX Animals.
            </summary>
            <param name="json"></param>
            <returns>IActionResult</returns>
            
            Note: The POST method attempts to map the body of the request to an object.
                  Without an object it can map to, the value obtained will be null. Newtonsoft
                  provides a generic JObject class that this function is able to map a generic JSON
                  object to. 
                  
        </member>
        <member name="M:Web.Services.Controllers.WSAQTAnimalsController.GetExampleString">
            <summary>
            GET request of an example JSON string for AQUATOX Animals.
            </summary>
            <returns>IActionResult</returns>
        </member>
        <member name="M:Web.Services.Controllers.WSAQTAnimalsController.GetExampleFile">
            <summary>
            GET request of example JSON file for AQUATOX Animals.
            </summary>
            <returns>FileResult</returns>
        </member>
        <member name="T:Web.Services.Controllers.AQTBioaccumulationInputExample">
            <summary>
            AQUATOX Bioaccumulation input example.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.AQTBioaccumulationInputExample.GetExamples">
            <summary>
            Get Example.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSAQTBioaccumulationController">
            <summary>
            AQUATOX Bioaccumulation controller for HMS.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSAQTBioaccumulationController.POST(Newtonsoft.Json.Linq.JObject)">
            <summary>
            POST method for running AQUATOX Bioaccumulation.
            </summary>
            <param name="json"></param>
            <returns>IActionResult</returns>
            
            Note: The POST method attempts to map the body of the request to an object.
                  Without an object it can map to, the value obtained will be null. Newtonsoft
                  provides a generic JObject class that this function is able to map a generic JSON
                  object to. 
                  
        </member>
        <member name="M:Web.Services.Controllers.WSAQTBioaccumulationController.GetExampleString">
            <summary>
            GET request of an example JSON string for AQUATOX Bioaccumulation.
            </summary>
            <returns>IActionResult</returns>
        </member>
        <member name="M:Web.Services.Controllers.WSAQTBioaccumulationController.GetExampleFile">
            <summary>
            GET request of example JSON file for AQUATOX Bioaccumulation.
            </summary>
            <returns>FileResult</returns>
        </member>
        <member name="T:Web.Services.Controllers.AQTChemicalsInputExample">
            <summary>
            AQUATOX Bioaccumulation input example.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.AQTChemicalsInputExample.GetExamples">
            <summary>
            Get Example.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSAQTChemicalsController">
            <summary>
            AQUATOX chemicals controller for HMS.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSAQTChemicalsController.POST(Newtonsoft.Json.Linq.JObject)">
            <summary>
            POST method for running AQUATOX Chemicals.
            </summary>
            <param name="json"></param>
            <returns>IActionResult</returns>
            
            Note: The POST method attempts to map the body of the request to an object.
                  Without an object it can map to, the value obtained will be null. Newtonsoft
                  provides a generic JObject class that this function is able to map a generic JSON
                  object to. 
                  
        </member>
        <member name="M:Web.Services.Controllers.WSAQTChemicalsController.GetExampleString">
            <summary>
            GET request of an example JSON string for AQUATOX Chemicals.
            </summary>
            <returns>IActionResult</returns>
        </member>
        <member name="M:Web.Services.Controllers.WSAQTChemicalsController.GetExampleFile">
            <summary>
            GET request of example JSON file for AQUATOX Chemicals.
            </summary>
            <returns>FileResult</returns>
        </member>
        <member name="T:Web.Services.Controllers.AQTDiagenesisInputExample">
            <summary>
            AQUATOX Diagenesis input example.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.AQTDiagenesisInputExample.GetExamples">
            <summary>
            Get Example.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSAQTDiagenesisController">
            <summary>
            AQUATOX Diagenesis controller for HMS.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSAQTDiagenesisController.POST(Newtonsoft.Json.Linq.JObject)">
            <summary>
            POST method for running AQUATOX Diagenesis.
            </summary>
            <param name="json"></param>
            <returns>IActionResult</returns>
            
            Note: The POST method attempts to map the body of the request to an object.
                  Without an object it can map to, the value obtained will be null. Newtonsoft
                  provides a generic JObject class that this function is able to map a generic JSON
                  object to. 
                  
        </member>
        <member name="M:Web.Services.Controllers.WSAQTDiagenesisController.GetExampleString">
            <summary>
            GET request of an example JSON string for AQUATOX Diagenesis.
            </summary>
            <returns>IActionResult</returns>
        </member>
        <member name="M:Web.Services.Controllers.WSAQTDiagenesisController.GetExampleFile">
            <summary>
            GET request of example JSON file for AQUATOX Diagenesis.
            </summary>
            <returns>FileResult</returns>
        </member>
        <member name="T:Web.Services.Controllers.AQTEcotoxicologyInputExample">
            <summary>
            AQUATOX Ecotoxicology input example.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.AQTEcotoxicologyInputExample.GetExamples">
            <summary>
            Get Example.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSAQTEcotoxicologyController">
            <summary>
            AQUATOX Ecotoxicology controller for HMS.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSAQTEcotoxicologyController.POST(Newtonsoft.Json.Linq.JObject)">
            <summary>
            POST method for running AQUATOX Ecotoxicology.
            </summary>
            <param name="json"></param>
            <returns>IActionResult</returns>
            
            Note: The POST method attempts to map the body of the request to an object.
                  Without an object it can map to, the value obtained will be null. Newtonsoft
                  provides a generic JObject class that this function is able to map a generic JSON
                  object to. 
                  
        </member>
        <member name="M:Web.Services.Controllers.WSAQTEcotoxicologyController.GetExampleString">
            <summary>
            GET request of an example JSON string for AQUATOX Ecotoxicology.
            </summary>
            <returns>IActionResult</returns>
        </member>
        <member name="M:Web.Services.Controllers.WSAQTEcotoxicologyController.GetExampleFile">
            <summary>
            GET request of example JSON file for AQUATOX Ecotoxicology.
            </summary>
            <returns>FileResult</returns>
        </member>
        <member name="T:Web.Services.Controllers.WSAquatoxInputBuilderControllerGetBaseJsonInputExample">
            <summary>
            Aquatox workflow get base jsons input example. 
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSAquatoxInputBuilderControllerGetBaseJsonInputExample.GetExamples">
            <summary>
            Get Example.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSAquatoxInputBuilderControllerLoadingsInputExample">
            <summary>
            Aquatox insert loadings with constant input example. 
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSAquatoxInputBuilderControllerLoadingsInputExample.GetExamples">
            <summary>
            Get Example.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSAquatoxInputBuilderController">
            <summary>
            API controller for handling requests for Aquatox inputs. 
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSAquatoxInputBuilderController.GetBaseJsonFlags">
            <summary>
            GET method for returning the Aquatox base json flags.
            </summary>
            <returns>List of Aquatox base json flag names.</returns>
        </member>
        <member name="M:Web.Services.Controllers.WSAquatoxInputBuilderController.PostBaseJsonFlags(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            POST method for returning the Aquatox workflow base json based on set flags.
            </summary>
            <param name="flags">A dictionary of [flag_name : bool]</param>
            <returns>Base json for aquatox simulation.</returns>
        </member>
        <member name="M:Web.Services.Controllers.WSAquatoxInputBuilderController.GetLoadings">
            <summary>
            GET method that returns dictionary of loading types and values
            </summary>
            -1 = inflow load,  0 = point-source, 1 = direct precipitation (maybe irrelevant), 2 = nonpoint-source
        </member>
        <member name="M:Web.Services.Controllers.WSAquatoxInputBuilderController.PostLoadings(Web.Services.Controllers.LoadingsInput)">
            <summary>
            POST method for inserting state variable loadings into Aquatox base json.
            </summary>
            <param name="input">Object of flags and list of LoadingsObjects</param>
            <returns>Updated "SV" contaminants.</returns>
        </member>
        <member name="T:Web.Services.Controllers.AQTNutrientsInputExample">
            <summary>
            AQUATOX Nutrients input example.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.AQTNutrientsInputExample.GetExamples">
            <summary>
            Get Example.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSAQTNutrientsController">
            <summary>
            AQUATOX nutrients controller for HMS.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSAQTNutrientsController.POST(Newtonsoft.Json.Linq.JObject)">
            <summary>
            POST method for running AQUATOX Nutrients.
            </summary>
            <param name="json"></param>
            <returns>IActionResult</returns>
            
            Note: The POST method attempts to map the body of the request to an object.
                  Without an object it can map to, the value obtained will be null. Newtonsoft
                  provides a generic JObject class that this function is able to map a generic JSON
                  object to. 
                  
        </member>
        <member name="M:Web.Services.Controllers.WSAQTNutrientsController.GetExampleString">
            <summary>
            GET request of an example JSON string for AQUATOX Nutrients.
            </summary>
            <returns>IActionResult</returns>
        </member>
        <member name="M:Web.Services.Controllers.WSAQTNutrientsController.GetExampleFile">
            <summary>
            GET request of example JSON file for AQUATOX Nutrients.
            </summary>
            <returns>FileResult</returns>
        </member>
        <member name="T:Web.Services.Controllers.AQTOrgMatterInputExample">
            <summary>
            AQUATOX Organic Matter input example.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.AQTOrgMatterInputExample.GetExamples">
            <summary>
            Get Example.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSAQTOrgMatterController">
            <summary>
            AQUATOX organic matter controller for HMS.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSAQTOrgMatterController.POST(Newtonsoft.Json.Linq.JObject)">
            <summary>
            POST method for running AQUATOX Organic Matter.
            </summary>
            <param name="json"></param>
            <returns>IActionResult</returns>
            
            Note: The POST method attempts to map the body of the request to an object.
                  Without an object it can map to, the value obtained will be null. Newtonsoft
                  provides a generic JObject class that this function is able to map a generic JSON
                  object to. 
                  
        </member>
        <member name="M:Web.Services.Controllers.WSAQTOrgMatterController.GetExampleString">
            <summary>
            GET request of an example JSON string for AQUATOX Organic Matter.
            </summary>
            <returns>IActionResult</returns>
        </member>
        <member name="M:Web.Services.Controllers.WSAQTOrgMatterController.GetExampleFile">
            <summary>
            GET request of example JSON file for AQUATOX Organic Matter.
            </summary>
            <returns>FileResult</returns>
        </member>
        <member name="T:Web.Services.Controllers.AQTPlantInputExample">
            <summary>
            AQUATOX Plants input example.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.AQTPlantInputExample.GetExamples">
            <summary>
            Get Example.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSAQTPlantController">
            <summary>
            AQUATOX plants controller for HMS.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSAQTPlantController.POST(Newtonsoft.Json.Linq.JObject)">
            <summary>
            POST method for running AQUATOX Plants.
            </summary>
            <param name="json"></param>
            <returns>IActionResult</returns>
            
            Note: The POST method attempts to map the body of the request to an object.
                  Without an object it can map to, the value obtained will be null. Newtonsoft
                  provides a generic JObject class that this function is able to map a generic JSON
                  object to. 
                  
        </member>
        <member name="M:Web.Services.Controllers.WSAQTPlantController.GetExampleString">
            <summary>
            GET request of an example JSON string for AQUATOX Plants.
            </summary>
            <returns>IActionResult</returns>
        </member>
        <member name="M:Web.Services.Controllers.WSAQTPlantController.GetExampleFile">
            <summary>
            GET request of example JSON file for AQUATOX Plants.
            </summary>
            <returns>FileResult</returns>
        </member>
        <member name="T:Web.Services.Controllers.AQTStreamHydrologyInputExample">
            <summary>
            AQUATOX Stream Hydrology input example.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.AQTStreamHydrologyInputExample.GetExamples">
            <summary>
            Get Example.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSAQTStreamHydrologyController">
            <summary>
            AQUATOX stream hydrology controller for HMS.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSAQTStreamHydrologyController.POST(Newtonsoft.Json.Linq.JObject)">
            <summary>
            POST method for running AQUATOX Stream Hydrology.
            </summary>
            <param name="json"></param>
            <returns>IActionResult</returns>
            
            Note: The POST method attempts to map the body of the request to an object.
                  Without an object it can map to, the value obtained will be null. Newtonsoft
                  provides a generic JObject class that this function is able to map a generic JSON
                  object to. 
                  
        </member>
        <member name="M:Web.Services.Controllers.WSAQTStreamHydrologyController.GetExampleString">
            <summary>
            GET request of an example JSON string for AQUATOX Stream Hydrology.
            </summary>
            <returns>IActionResult</returns>
        </member>
        <member name="M:Web.Services.Controllers.WSAQTStreamHydrologyController.GetExampleFile">
            <summary>
            GET request of example JSON file for AQUATOX Stream Hydrology.
            </summary>
            <returns>FileResult</returns>
        </member>
        <member name="T:Web.Services.Controllers.WSAquatoxWorkflowController">
            <summary>
            AQUATOX workflow controller class.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSAquatoxWorkflowController.GET(System.String)">
            <summary>
            GET method for calling the AQUATOX workflow.
            </summary>
            <param name="task_id"></param>
            <returns></returns>
        </member>
        <member name="M:Web.Services.Controllers.WSAquatoxWorkflowController.GetArchivedOutput(System.String)">
            <summary>
            Given the task_id for a single comid, returns the archived results of 
            the state variables outputs.
            </summary>
            <param name="task_id"></param>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSCatchmentController">
            <summary>
            HMS API controller for retrieving catchment data.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSCatchmentController.GETDefaultOutput(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.CoastalInputExample">
            <summary>
            Swashbuckle Coastal POST request example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.CoastalInputExample.GetExamples">
            <summary>
            Get example function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSCoastalController">
            <summary>
            API controller for handling requests for coastal data.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Web.Services.Controllers.WSCoastalController.GetCoastalData(Data.TimeSeriesInput)" -->
        <member name="T:Web.Services.Controllers.ContaminantLoaderInput">
            <summary>
            ContaminantLoader Input that implements TimeSeriesInput object
            </summary>
        </member>
        <member name="T:Web.Services.Controllers.ContaminantLoaderInputExample">
            <summary>
            Swashbuckle ContaminantLoader POST request example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.ContaminantLoaderInputExample.GetExamples">
            <summary>
            Get example function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSContaminantLoaderController">
            <summary>
            ContaminantLoader controller for HMS.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Web.Services.Controllers.WSContaminantLoaderController.POST(Web.Services.Controllers.ContaminantLoaderInput)" -->
        <member name="T:Web.Services.Controllers.DewPointInput">
            <summary>
            Label: Dew Point
            Description: Dew Point Input that implements TimeSeriesInput object;
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.DewPointInput.Source">
            <summary>
            Description: DewPoint data source;
            Default: "prism";
            Options: ["prism"];
            Required: True;
            </summary>
        </member>
        <member name="T:Web.Services.Controllers.DewPointInputExample">
            <summary>
            Swashbuckle Dew Point POST request example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.DewPointInputExample.GetExamples">
            <summary>
            Get example function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSDewPointController">
            <summary>
            DewPoint controller for HMS.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSDewPointController.POST(Web.Services.Controllers.DewPointInput)">
            <summary>
            POST method for submitting a request for dew point temperature data.
            </summary>
            <param name="tempInput">Parameters for retrieving dew point data. Required fields: DateTimeSpan.StartDate, DateTimeSpan.EndDate, Geometry.Point.Latitude, Geometry.Point.Longitude, Source</param>
            <returns>ITimeSeries</returns>
        </member>
        <member name="T:Web.Services.Controllers.EvapotranspirationInput">
            <summary>
            Evapotranspiration Input that implements TimeSeriesInput object
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.EvapotranspirationInput.Algorithm">
            <summary>
            REQUIRED: Algorithm used for Evapotranspiration.
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.EvapotranspirationInput.Albedo">
            <summary>
            REQUIRED: Albedo coefficient.
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.EvapotranspirationInput.CentralLongitude">
            <summary>
            REQUIRED: Central Longitude of Time Zone in degrees.
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.EvapotranspirationInput.SunAngle">
            <summary>
            REQUIRED: Angle of the sun in degrees.
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.EvapotranspirationInput.Emissivity">
            <summary>
            REQUIRED: The ability of a surface to emit radiant energy.
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.EvapotranspirationInput.Model">
            <summary>
            REQUIRED: Specifies if potential, actual, or wet environment evaporation are used.
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.EvapotranspirationInput.Zenith">
            <summary>
            REQUIRED: Zenith Albedo coefficient.
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.EvapotranspirationInput.LakeSurfaceArea">
            <summary>
            REQUIRED: Surface area of lake in square kilometers.
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.EvapotranspirationInput.LakeDepth">
            <summary>
            REQUIRED: Average depth of lake in meters.
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.EvapotranspirationInput.SubsurfaceResistance">
            <summary>
            REQUIRED: Subsurface Resistance.
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.EvapotranspirationInput.StomatalResistance">
            <summary>
            REQUIRED: Stomatal Resistance.
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.EvapotranspirationInput.LeafWidth">
            <summary>
            REQUIRED: Leaf Width in meters.
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.EvapotranspirationInput.RoughnessLength">
            <summary>
            REQUIRED: Roughness Length in meters.
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.EvapotranspirationInput.VegetationHeight">
            <summary>
            REQUIRED: Vegetation Height in meters.
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.EvapotranspirationInput.LeafAreaIndices">
            <summary>
            REQUIRED: Monthly leaf area indices.
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.EvapotranspirationInput.AirTemperature">
            <summary>
            REQUIRED: Monthly air temperature coefficients.
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.EvapotranspirationInput.UserData">
            <summary>
            OPTIONAL: Data file provided by the user.
            </summary>
        </member>
        <member name="T:Web.Services.Controllers.EvapotranspirationInputExample">
            <summary>
            Swashbuckle Evapotranspiration POST request example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.EvapotranspirationInputExample.GetExamples">
            <summary>
            Get example function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSEvapotranspirationController">
            <summary>
            Evapotranspiration controller for HMS.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSEvapotranspirationController.POST(Web.Services.Controllers.EvapotranspirationInput)">
            <summary>
            POST method for submitting a request for evapotranspiration data.
            </summary>
            <param name="evapoInput">Parameters for retrieving evapotranspiration data. Required fields: DateTimeSpan.StartDate, DateTimeSpan.EndDate, Geometry.Point.Latitude, Geometry.Point.Longitude, Source</param>
            <returns>ITimeSeries</returns>
        </member>
        <member name="T:Web.Services.Controllers.InputsResponseExample">
            <summary>
            Swashbuckle project/inputs GET response example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.InputsResponseExample.GetExamples">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSHawqsProjectInputsController">
            <summary>
            HMS API controller for retrieving HAWQS project inputs.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSHawqsProjectInputsController.GetProjectInputDefinitions">
            <summary>
            Returns HAWQS project input parameters as a JSON string
            </summary>
            <returns>
            A JSON string
            </returns>
        </member>
        <member name="T:Web.Services.Controllers.SubmitInputExample">
            <summary>
            Swashbuckle project/submit POST request example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.SubmitInputExample.GetExamples">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.SubmitResponseExample">
            <summary>
            Swashbuckle project/submit POST response example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.SubmitResponseExample.GetExamples">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.StatusInputExample">
            <summary>
            Swashbuckle project/status POST request example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.StatusInputExample.GetExamples">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.StatusResponseExample">
            <summary>
            Swashbuckle project/status POST response example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.StatusResponseExample.GetExamples">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.DataInputExample">
            <summary>
            Swashbuckle project/data POST request example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.DataInputExample.GetExamples">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.DataResponseExample">
            <summary>
            Swashbuckle project/data POST response example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.DataResponseExample.GetExamples">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.CancelInputExample">
            <summary>
            Swashbuckle project/cancel POST request example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.CancelInputExample.GetExamples">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.CancelResponseExample">
            <summary>
            Swashbuckle project/cancel POST response example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.CancelResponseExample.GetExamples">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSHawqsProjectSubmitController">
            <summary>
            HMS API controller for hawqs project submission, status, and data.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSHawqsProjectSubmitController.SubmitProject(Hawqs.HawqsSubmitRequest)">
            <summary>
            Submits and executes a HAWQS project. Returns project id and status url as a JSON string
            </summary>
            <returns>
            job id and data url or error
            </returns>
        </member>
        <member name="M:Web.Services.Controllers.WSHawqsProjectSubmitController.GetProjectStatus(Hawqs.HawqsStatusRequest,System.String)">
            <summary>
            Returns project progress percentage as a JSON string
            </summary>
            <returns>
            Returns JSON string
            </returns>
        </member>
        <member name="M:Web.Services.Controllers.WSHawqsProjectSubmitController.GetProjectData(Hawqs.HawqsDataRequest,System.String)">
            <summary>
            Returns list of web URLs for data retrevial as a JSON string
            </summary>
            <returns>
            Returns JSON string
            </returns>
        </member>
        <member name="M:Web.Services.Controllers.WSHawqsProjectSubmitController.CancelProjectExecution(Hawqs.HawqsCancelRequest,System.String)">
            <summary>
            Cancels project execution
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Web.Services.Controllers.HumidityInput">
            <summary>
            Label: Humidity;
            Description: Humidity input;
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.HumidityInput.Relative">
            <summary>
            Description: Relative or Specific Humidity. Only relative humidity implemented.;
            Default: True;
            Options: True;
            Required: True;
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.HumidityInput.Source">
            <summary>
            Description: Humidity data source;
            Default: "prism";
            Options: ["prism"];
            Required: True;
            </summary>
        </member>
        <member name="T:Web.Services.Controllers.HumidityInputExample">
            <summary>
            Swashbuckle Humidity POST request example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.HumidityInputExample.GetExamples">
            <summary>
            Get example function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSHumidityController">
            <summary>
            Humidity controller for HMS.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSHumidityController.POST(Web.Services.Controllers.HumidityInput)">
            <summary>
            POST method for submitting a request for humidity data.
            </summary>
            <param name="tempInput">Parameters for retrieving humidity data. Required fields: DateTimeSpan.StartDate, DateTimeSpan.EndDate, Geometry.Point.Latitude, Geometry.Point.Longitude, Source</param>
            <returns>ITimeSeries</returns>
        </member>
        <member name="T:Web.Services.Controllers.PrecipitationInput">
            <summary>
            Label: Precipitation;
            Description: Precipitation Input that implements TimeSeriesInput object.;
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.PrecipitationInput.Source">
            <summary>
            Description: Precipitation data source;
            Default: "nldas";
            Options: ["nldas", "gldas", "ncei", "daymet", "prism", "trmm"];
            Required: True;
            </summary>
        </member>
        <member name="T:Web.Services.Controllers.PrecipitationInputExample">
            <summary>
            Swashbuckle Precipitation POST request example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.PrecipitationInputExample.GetExamples">
            <summary>
            Get example function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSPrecipitationController">
            <summary>
            Precipitation controller for HMS.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSPrecipitationController.POST(Web.Services.Controllers.PrecipitationInput)">
            <summary>
            POST method for submitting a request for precipitation data.
            </summary>
            <param name="precipInput">Parameters for retrieving precipitation data. Required fields: DateTimeSpan.StartDate, DateTimeSpan.EndDate, Geometry.Point.Latitude, Geometry.Point.Longitude, Source</param>
            <returns>ITimeSeries</returns>
        </member>
        <member name="T:Web.Services.Controllers.PressureInput">
            <summary>
            Label: Pressue
            Description: Surface air pressure input that implements TimeSeriesInput object
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.PressureInput.Source">
            <summary>
            Description: Pressue data source;
            Default: "gldas";
            Options: ["gldas"];
            Required: True;
            </summary>
        </member>
        <member name="T:Web.Services.Controllers.PressureInputExample">
            <summary>
            Swashbuckle Pressure POST request example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.PressureInputExample.GetExamples">
            <summary>
            Get example function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSPressureController">
            <summary>
            Pressure controller for HMS.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSPressureController.POST(Web.Services.Controllers.PressureInput)">
            <summary>
            POST method for submitting a request for pressure data.
            </summary>
            <param name="tempInput">Parameters for retrieving pressure data. Required fields: DateTimeSpan.StartDate, DateTimeSpan.EndDate, Geometry.Point.Latitude, Geometry.Point.Longitude, Source</param>
            <returns>ITimeSeries</returns>
        </member>
        <member name="T:Web.Services.Controllers.RadiationInput">
            <summary>
            Label: Solar Radiation;
            Description: High and short wave radiation that reaches the ground.
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.RadiationInput.Source">
            <summary>
            Description: Radiation data source;
            Default: "nldas";
            Options: ["nldas", "gldas", "daymet"];
            Required: True;
            </summary>
        </member>
        <member name="T:Web.Services.Controllers.RadiationInputExample">
            <summary>
            Swashbuckle Radiation POST request example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.RadiationInputExample.GetExamples">
            <summary>
            Get example function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSRadiationController">
            <summary>
            Radiation controller for HMS.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSRadiationController.POST(Web.Services.Controllers.RadiationInput)">
            <summary>
            POST method for submitting a request for radiation data.
            </summary>
            <param name="tempInput">Parameters for retrieving radiation data. Required fields: DateTimeSpan.StartDate, DateTimeSpan.EndDate, Geometry.Point.Latitude, Geometry.Point.Longitude, Source</param>
            <returns>ITimeSeries</returns>
        </member>
        <member name="T:Web.Services.Controllers.SoilMoistureInput">
            <summary>
            Label: Soil Moiture;
            Description: Soil moisture content for specified layer depths;
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.SoilMoistureInput.Layers">
            <summary>
            Description: List of requested soil moisture layers;
            Default: None;
            Options: ["0-10", "10-40", "40-100", "100-200", "0-100", "0-200"];
            Required: True;
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.SoilMoistureInput.Source">
            <summary>
            Description: Soil moisture data source;
            Default: "nldas";
            Options: ["nldas", "gldas"];
            Required: True;
            </summary>
        </member>
        <member name="T:Web.Services.Controllers.SoilMoistureInputExample">
            <summary>
            Swashbuckle SoilMoisture POST request example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.SoilMoistureInputExample.GetExamples">
            <summary>
            Get example function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSSoilMoistureController">
            <summary>
            SoilMoisture controller for HMS.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSSoilMoistureController.POST(Web.Services.Controllers.SoilMoistureInput)">
            <summary>
            POST method for submitting a request for soil moisture data.
            </summary>
            <param name="smInput">Parameters for retrieving SoilMoisture data. Required fields: DateTimeSpan.StartDate, DateTimeSpan.EndDate, Geometry.Point.Latitude, Geometry.Point.Longitude, Source</param>
            <returns>ITimeSeries</returns>
        </member>
        <member name="T:Web.Services.Controllers.SolarInput">
            <summary>
            Solar Data input object
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.SolarInput.input">
            <summary>
            Input Dictionary, containing unknown values.
            </summary>
        </member>
        <member name="T:Web.Services.Controllers.SolarInputExample">
            <summary>
            Input example taken from the default input values call.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.SolarInputExample.GetExamples">
            <summary>
            Gets example object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSSolarController">
            <summary>
            HMS API controller for GC Solar data.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSSolarController.GETDefaultOutput">
            <summary>
            GET request for retrieving the default output values for the GCSolar module, 
            this is equivalent to selecting the third option from the start menu of the desktop application.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Web.Services.Controllers.WSSolarController.GETDefaultInput">
            <summary>
            GET request for retrieving the default input values for the GCSolar module,
            this is equivalent to selecting the first option from the start menu of the desktop application.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Web.Services.Controllers.WSSolarController.POSTCustomInput(Web.Services.Controllers.SolarInput)">
            <summary>
            POST request for retrieving solar data using custom values from the GCSolar module,
            this is equivalent to selecting the second option from the start menu of the desktop application.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Web.Services.Controllers.WSSolarController.GetInputMetadata">
            <summary>
            GET request for metadata on the inputs for the GCSolar module.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.SolarCalcInputExample">
            <summary>
            Input example for NOAA Solar Calculator POST
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.SolarCalcInputExample.GetExamples">
            <summary>
            Get example function
            </summary>  
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSMeteorologySolarController">
            <summary>
            Meterology Solar HMS endpoint class
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSMeteorologySolarController.POSTSolarCalculator(Web.Services.Models.SolarCalculatorInput)">
            <summary>
            NOAA Solar Calculator 
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSStreamController">
            <summary>
            HMS API controller for retrieving stream data.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSStreamController.GETDefaultOutput(System.String,System.String,System.Double,System.String,System.String)">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.StreamflowInput">
            <summary>
            Streamflow Input that implements TimeSeriesInput object.
            </summary>
        </member>
        <member name="T:Web.Services.Controllers.StreamflowInputExample">
            <summary>
            Swashbuckle Streamflow POST request example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.StreamflowInputExample.GetExamples">
            <summary>
            Get example function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSStreamflowController">
            <summary>
            Streamflow controller for HMS.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSStreamflowController.POST(Web.Services.Controllers.StreamflowInput)">
            <summary>
            POST method for submitting a request for precipitation data.
            </summary>
            <param name="sfInput">Parameters for retrieving streamflow data. Required fields: DateTimeSpan.StartDate, DateTimeSpan.EndDate, Geometry.GeometryMetadata.gaugestation, Source</param>
            <returns>ITimeSeries</returns>
        </member>
        <member name="T:Web.Services.Controllers.SubSurfaceFlowInput">
            <summary>
            Label: Sub-Surface Flow;
            Description: Sub-surface water flow (baseflow).;
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.SubSurfaceFlowInput.Source">
            <summary>
            Description: Subsurface flow data source;
            Default: "nldas";
            Options: ["nldas", "gldas", "curvenumber"];
            Required: True;
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.SubSurfaceFlowInput.PrecipSource">
            <summary>
            Description: Precipitation data source for Curve Number.;
            Default: "nldas";
            Options: ["nldas", "gldas", "ncei", "daymet", "prism", "trmm"];
            Required: False;
            </summary>
        </member>
        <member name="T:Web.Services.Controllers.SubSurfaceFlowInputExample">
            <summary>
            Swashbuckle SubSurfaceFlow POST request example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.SubSurfaceFlowInputExample.GetExamples">
            <summary>
            Get example function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSSubSurfaceFlowController">
            <summary>
            SubSurfaceFlow controller for HMS.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSSubSurfaceFlowController.POST(Web.Services.Controllers.SubSurfaceFlowInput)">
            <summary>
            POST method for submitting a request for subsurface flow data.
            </summary>
            <param name="ssFlowInput">Parameters for retrieving SubSurfaceFlow data. Required fields: DateTimeSpan.StartDate, DateTimeSpan.EndDate, Geometry.Point.Latitude, Geometry.Point.Longitude, Source</param>
            <returns>ITimeSeries</returns>
        </member>
        <member name="T:Web.Services.Controllers.SurfaceRunoffInput">
            <summary>
            Label: Surface Runoff;
            Description: Surface rainfall runoff.;
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.SurfaceRunoffInput.Source">
            <summary>
            Description: Surface runoff data source;
            Default: "nldas";
            Options: ["nldas", "gldas", "curvenumber"];
            Required: True;
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.SurfaceRunoffInput.PrecipSource">
            <summary>
            Description: Precipitation data source for Curve Number.;
            Default: "nldas";
            Options: ["nldas", "gldas", "ncei", "daymet", "prism", "trmm"];
            Required: False;
            </summary>
        </member>
        <member name="T:Web.Services.Controllers.SurfaceRunoffInputExample">
            <summary>
            Swashbuckle SurfaceRunoff POST request example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.SurfaceRunoffInputExample.GetExamples">
            <summary>
            Get example function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSSurfaceRunoffController">
            <summary>
            SurfaceRunoff controller for HMS.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSSurfaceRunoffController.POST(Web.Services.Controllers.SurfaceRunoffInput)">
            <summary>
            POST method for submitting a request for surface runoff data.
            </summary>
            <param name="runoffInput">Parameters for retrieving SurfaceRunoff data. Required fields: DateTimeSpan.StartDate, DateTimeSpan.EndDate, Geometry.Point.Latitude, Geometry.Point.Longitude, Source</param>
            <returns>ITimeSeries</returns>
        </member>
        <member name="T:Web.Services.Controllers.TemperatureInput">
            <summary>
            Label: Temperature;
            Description: Near-ground air temperature.;
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.TemperatureInput.Source">
            <summary>
            Description: Temperature data source;
            Default: "nldas";
            Options: ["nldas", "gldas", "ncei", "daymet", "prism"];
            Required: True;
            </summary>
        </member>
        <member name="T:Web.Services.Controllers.TemperatureInputExample">
            <summary>
            Swashbuckle Temperature POST request example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.TemperatureInputExample.GetExamples">
            <summary>
            Get example function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSTemperatureController">
            <summary>
            Temperature controller for HMS.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSTemperatureController.POST(Web.Services.Controllers.TemperatureInput)">
            <summary>
            POST method for submitting a request for evapotranspiration data.
            </summary>
            <param name="tempInput">Parameters for retrieving evapotranspiration data. Required fields: DateTimeSpan.StartDate, DateTimeSpan.EndDate, Geometry.Point.Latitude, Geometry.Point.Longitude, Source</param>
            <returns>ITimeSeries</returns>
        </member>
        <member name="T:Web.Services.Controllers.TotalFlowInputExample">
            <summary>
            Swashbuckle TotalFlow POST request example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.TotalFlowInputExample.GetExamples">
            <summary>
            Get example function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSTotalFlowController">
            <summary>
            Total Flow controller for HMS
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSTotalFlowController.POST(Web.Services.Models.TotalFlowInput)">
            <summary>
            POST method for submitting a request for total flow data.
            </summary>
            <param name="tfInput"></param>
            <returns>ITimeSeriesOutput</returns>
        </member>
        <member name="T:Web.Services.Controllers.WSUtilitiesController">
            <summary>
            Utility REST endpoints for HMS components.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSUtilitiesController.AllDatasetEndpointsCheck">
            <summary>
            Checks endpoints for all datasets.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WatershedDelineationInput">
            <summary>
            Delineation Input that implements TimeSeriesInput object.
            </summary>
        </member>
        <member name="T:Web.Services.Controllers.WatershedDelineationOutput">
            <summary>
            WorkFlow Output object
            </summary>
        </member>
        <member name="T:Web.Services.Controllers.WatershedDelineationInputExample">
            <summary>
            Swashbuckle DelineationCompare POST request example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WatershedDelineationInputExample.GetExamples">
            <summary>
            Get example function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSWatershedDelineationController">
            <summary>
            DelineationCompare controller for HMS.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSWatershedDelineationController.POST(Web.Services.Controllers.WatershedDelineationInput)">
            <summary>
            POST method for submitting a request for delineation compare data.
            Source parameter must contain a value, but value is not used.
            </summary>
            <param name="watershedInput">Parameters for retrieving DelineationCompare data. Required fields: Dataset, SourceList</param>
            <returns>ITimeSeries</returns>
        </member>
        <member name="T:Web.Services.Controllers.WatershedWorkflowInput">
            <summary>
            WorkFlow Input that implements TimeSeriesInput object.
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.WatershedWorkflowInput.RunoffSource">
            <summary>
            OPTIONAL: Specifies the requested source for Runoff Data
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.WatershedWorkflowInput.StreamHydrology">
            <summary>
            OPTIONAL: Specifies the requested Stream Hydrology Algorithm to use
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.WatershedWorkflowInput.Aggregation">
            <summary>
            OPTIONAL: States whether or not runoff should be aggregated by catchments
            </summary>
        </member>
        <member name="T:Web.Services.Controllers.WatershedWorkflowOutput">
            <summary>
            WorkFlow Output object
            </summary>
        </member>
        <member name="T:Web.Services.Controllers.WatershedWorkflowInputExample">
            <summary>
            Swashbuckle WorkFlowCompare POST request example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WatershedWorkflowInputExample.GetExamples">
            <summary>
            Get example function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSWatershedWorkflowController">
            <summary>
            WorkFlowCompare controller for HMS.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSWatershedWorkflowController.POST(Web.Services.Controllers.WatershedWorkflowInput)">
            <summary>
            POST method for submitting a request for getting workflow compare data.
            Source parameter must contain a value, but value is not used.
            </summary>
            <param name="workflowInput">Parameters for retrieving WorkFlowCompare data. Required fields: Dataset, SourceList</param>
            <returns>ITimeSeries</returns>
        </member>
        <member name="T:Web.Services.Controllers.WindInput">
            <summary>
            Label: Wind;
            Description: Near-ground wind.;
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.WindInput.Source">
            <summary>
            Description: Wind data source;
            Default: "nldas";
            Options: ["nldas", "gldas"];
            Required: True;
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Web.Services.Controllers.WindInput.Component" -->
        <member name="T:Web.Services.Controllers.WindInputExample">
            <summary>
            Swashbuckle Wind POST request example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WindInputExample.GetExamples">
            <summary>
            Get example function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSWindController">
            <summary>
            Wind controller for HMS.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSWindController.POST(Web.Services.Controllers.WindInput)">
            <summary>
            POST method for submitting a request for wind data.
            </summary>
            <param name="tempInput">Parameters for retrieving wind data. Required fields: DateTimeSpan.StartDate, DateTimeSpan.EndDate, Geometry.Point.Latitude, Geometry.Point.Longitude, Source</param>
            <returns>ITimeSeries</returns>
        </member>
        <member name="T:Web.Services.Controllers.PrecipitationCompareInput">
            <summary>
            PrecipitationCompare Input that implements TimeSeriesInput object.
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.PrecipitationCompareInput.Dataset">
            <summary>
            Specified dataset for the workflow
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.PrecipitationCompareInput.SourceList">
            <summary>
            List of sources for the workflow.
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.PrecipitationCompareInput.Weighted">
            <summary>
            States whether or not precip should be aggregated by grid cells (weighted spatial average).
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.PrecipitationCompareInput.ExtremeDaily">
            <summary>
            Daily precip threshold in mm.
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.PrecipitationCompareInput.ExtremeTotal">
            <summary>
            Five day total precip threshold in mm.
            </summary>
        </member>
        <member name="T:Web.Services.Controllers.PrecipitationExtractionInput">
            <summary>
            PrecipitationExtraction Input that implements TimeSeriesInput object.
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.PrecipitationExtractionInput.Dataset">
            <summary>
            Specified dataset for the workflow
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.PrecipitationExtractionInput.SourceList">
            <summary>
            List of sources for the workflow.
            </summary>
        </member>
        <member name="T:Web.Services.Controllers.PrecipitationCompareInputExample">
            <summary>
            Swashbuckle Precipitation POST request example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.PrecipitationCompareInputExample.GetExamples">
            <summary>
            Get example function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.PrecipitationExtractionInputExample">
            <summary>
            Swashbuckle Precipitation Data Extraction POST request example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.PrecipitationExtractionInputExample.GetExamples">
            <summary>
            Get example function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSWorkflowPrecipController">
            <summary>
            WorkflowPrecip controller for HMS.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSWorkflowPrecipController.POSTComparison(Web.Services.Controllers.PrecipitationCompareInput)">
            <summary>
            POST method for submitting a request for precip comparison data.
            Source parameter must contain a value, but value is not used.
            </summary>
            <param name="precipInput">Parameters for retrieving PrecipComparison data. Required fields: Dataset, SourceList, Weighted, Extreme params</param>
            <returns>ITimeSeries</returns>
        </member>
        <member name="M:Web.Services.Controllers.WSWorkflowPrecipController.POSTExtraction(Web.Services.Controllers.PrecipitationExtractionInput)">
            <summary>
            POST method for submitting a request for precip extraction data.
            Source parameter must contain a value, but value is not used.
            </summary>
            <param name="precipInput">Parameters for retrieving PrecipExtraction data. Required fields: Dataset, SourceList</param>
            <returns>ITimeSeries</returns>
        </member>
        <member name="T:Web.Services.Controllers.WaterQualityInput">
            <summary>
            WaterQuality Input that implements TimeSeriesInput object.
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.WaterQualityInput.TaskID">
            <summary>
            TaskID required for data storage in mongodb
            </summary>
        </member>
        <member name="P:Web.Services.Controllers.WaterQualityInput.DataSource">
            <summary>
            Data source for data retrieval
            If value is 'nldas': surface runoff and subsurface flow will be from nldas (no precip will be downloaded); 
            If value is 'ncei', precip data will be downloaded from the closest station to the catchment and curvenumber will be used for surface runoff/subsurface flow.
            </summary>
        </member>
        <member name="T:Web.Services.Controllers.WaterQualityInputExample">
            <summary>
            Swashbuckle Water Quality POST request example
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WaterQualityInputExample.GetExamples">
            <summary>
            Get example function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Controllers.WSWorkflowWaterQualityController">
            <summary>
            Workflow Water Quality controller for HMS.
            </summary>
        </member>
        <member name="M:Web.Services.Controllers.WSWorkflowWaterQualityController.POSTComparison(Web.Services.Controllers.WaterQualityInput)">
            <summary>
            POST method to submit a request for water quality data.
            dataSource can be 'nldas' or 'ncei', which will pull data from GHCND:US1NCCM0006
            </summary>
            <param name="waterqualityInput"></param>
            <returns>ITimeSeries</returns>
        </member>
        <member name="T:Web.Services.Models.WSAquatoxAnimals">
            <summary>
            Pass through model object for calling AQTAnimals.
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxAnimals.RunAQTAnimals(System.String@,System.String@)">
            <summary>
            Calls AQTAnimals and runs simulation.
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxAnimals.CheckForErrors(System.String)">
            <summary>
            Utility function to check for error after running a simulation.
            </summary>
            <returns>ITimeSeriesOutput</returns>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxAnimals.GetValidJsonExampleFile">
            <summary>
            Returns the json example file for AQUATOX Animals.
            </summary>
            <returns>byte[]</returns>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxAnimals.GetValidJsonExampleString">
            <summary>
            Returns the json as a string from valid text file.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Web.Services.Models.WSAquatoxBioaccumulation">
            <summary>
            Pass through model object for calling AQTBioaccumulationModel.
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxBioaccumulation.RunAQTBioaccumulation(System.String@,System.String@)">
            <summary>
            Calls AQTBioaccumulationModel and runs simulation.
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxBioaccumulation.CheckForErrors(System.String)">
            <summary>
            Utility function to check for error after running a simulation.
            </summary>
            <returns>ITimeSeriesOutput</returns>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxBioaccumulation.GetValidJsonExampleFile">
            <summary>
            Returns the json example file for AQUATOX Bioaccumulation.
            </summary>
            <returns>byte[]</returns>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxBioaccumulation.GetValidJsonExampleString">
            <summary>
            Returns the json as a string from valid text file.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Web.Services.Models.WSAquatoxChemicals">
            <summary>
            Pass through model object for calling AQTChemicalModel.
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxChemicals.RunAQTChemicals(System.String@,System.String@)">
            <summary>
            Calls AQTChemicalModel and runs simulation.
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxChemicals.CheckForErrors(System.String)">
            <summary>
            Utility function to check for error after running a simulation.
            </summary>
            <returns>ITimeSeriesOutput</returns>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxChemicals.GetValidJsonExampleFile">
            <summary>
            Returns the json example file for AQUATOX Chemicals.
            </summary>
            <returns>byte[]</returns>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxChemicals.GetValidJsonExampleString">
            <summary>
            Returns the json as a string from valid text file.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Web.Services.Models.WSAquatoxDiagenesis">
            <summary>
            Pass through model object for calling AQTDiagenesisModel.
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxDiagenesis.RunAQTDiagenesis(System.String@,System.String@)">
            <summary>
            Calls AQTDiagenesisModel and runs simulation.
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxDiagenesis.CheckForErrors(System.String)">
            <summary>
            Utility function to check for error after running a simulation.
            </summary>
            <returns>ITimeSeriesOutput</returns>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxDiagenesis.GetValidJsonExampleFile">
            <summary>
            Returns the json example file for AQUATOX Diagenesis.
            </summary>
            <returns>byte[]</returns>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxDiagenesis.GetValidJsonExampleString">
            <summary>
            Returns the json as a string from valid text file.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Web.Services.Models.WSAquatoxEcotoxicology">
            <summary>
            Pass through model object for calling AQTEcotoxicologyModel.
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxEcotoxicology.RunAQTEcotoxicology(System.String@,System.String@)">
            <summary>
            Calls AQTAnimals and runs simulation.
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxEcotoxicology.CheckForErrors(System.String)">
            <summary>
            Utility function to check for error after running a simulation.
            </summary>
            <returns>ITimeSeriesOutput</returns>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxEcotoxicology.GetValidJsonExampleFile">
            <summary>
            Returns the json example file for AQUATOX Ecotoxicology.
            </summary>
            <returns>byte[]</returns>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxEcotoxicology.GetValidJsonExampleString">
            <summary>
            Returns the json as a string from valid text file.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Web.Services.Models.WSAquatoxInputBuilder">
             <summary>
            
             </summary>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxInputBuilder.GetBaseJsonFlags">
            <summary>
            Returns the types of flags for getting a base simulation json.
            </summary>
            <returns>List of flag options</returns>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxInputBuilder.GetBaseJson(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            Returns a base simulation json from file based on set flags.
            Defaults to whatever file is returned as if all parameters are false.
            </summary>
            <param name="flags">Dictionary of flag names and values</param>
            <returns>Base json string from file</returns>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxInputBuilder.GetBaseJsonHelper(System.Collections.Generic.List{System.Boolean})">
            <summary>
            Helper for returning file from GetBaseJson. Made in an attempt to make code 
            modular and more readable.
            </summary>
            <param name="flagOptions">List of flags</param>
            <returns>Base json string from file</returns>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxInputBuilder.InsertLoadings(System.String,Web.Services.Controllers.LoadingsInput)">
            <summary>
            Method to insert loadings into an Aquatox simulation. 
            </summary>
        </member>
        <member name="T:Web.Services.Models.AQTNutrients">
            <summary>
            Pass through model object for calling AQTNutrient Model.
            </summary>
        </member>
        <member name="M:Web.Services.Models.AQTNutrients.RunAQTNutrients(System.String@,System.String@)">
            <summary>
            Calls AQTNutrients Model and runs simulation.
            </summary>
        </member>
        <member name="M:Web.Services.Models.AQTNutrients.CheckForErrors(System.String)">
            <summary>
            Utility function to check for error after running a simulation.
            </summary>
            <returns>ITimeSeriesOutput</returns>
        </member>
        <member name="M:Web.Services.Models.AQTNutrients.GetValidJsonExampleFile">
            <summary>
            Returns the json example file for AQUATOX Nutrients.
            </summary>
            <returns>byte[]</returns>
        </member>
        <member name="M:Web.Services.Models.AQTNutrients.GetValidJsonExampleString">
            <summary>
            Returns the json as a string from valid text file.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Web.Services.Models.AQTOrgMatter">
            <summary>
            Pass through model object for calling AQTOrganicMatter Model.
            </summary>
        </member>
        <member name="M:Web.Services.Models.AQTOrgMatter.RunAQTOrgMatter(System.String@,System.String@)">
            <summary>
            Calls AQTOrganicMatter Model and runs simulation.
            </summary>
        </member>
        <member name="M:Web.Services.Models.AQTOrgMatter.CheckForErrors(System.String)">
            <summary>
            Utility function to check for error after running a simulation.
            </summary>
            <returns>ITimeSeriesOutput</returns>
        </member>
        <member name="M:Web.Services.Models.AQTOrgMatter.GetValidJsonExampleFile">
            <summary>
            Returns the json example file for AQUATOX Organic Matter.
            </summary>
            <returns>byte[]</returns>
        </member>
        <member name="M:Web.Services.Models.AQTOrgMatter.GetValidJsonExampleString">
            <summary>
            Returns the json as a string from valid text file.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Web.Services.Models.AQTPlant">
            <summary>
            Pass through model object for calling AQTPlants Model.
            </summary>
        </member>
        <member name="M:Web.Services.Models.AQTPlant.RunAQTPlants(System.String@,System.String@)">
            <summary>
            Calls AQTPlants Model and runs simulation.
            </summary>
        </member>
        <member name="M:Web.Services.Models.AQTPlant.CheckForErrors(System.String)">
            <summary>
            Utility function to check for error after running a simulation.
            </summary>
            <returns>ITimeSeriesOutput</returns>
        </member>
        <member name="M:Web.Services.Models.AQTPlant.GetValidJsonExampleFile">
            <summary>
            Returns the json example file for AQUATOX Plants.
            </summary>
            <returns>byte[]</returns>
        </member>
        <member name="M:Web.Services.Models.AQTPlant.GetValidJsonExampleString">
            <summary>
            Returns the json as a string from valid text file.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Web.Services.Models.AQTStreamHydrology">
            <summary>
            Pass through model object for calling AQTStreamHydrology Model.
            </summary>
        </member>
        <member name="M:Web.Services.Models.AQTStreamHydrology.RunAQTStreamHydrology(System.String@,System.String@)">
            <summary>
            Calls AQTStreamHydrology and runs simulation.
            </summary>
        </member>
        <member name="M:Web.Services.Models.AQTStreamHydrology.CheckForErrors(System.String)">
            <summary>
            Utility function to check for error after running a simulation.
            </summary>
            <returns>ITimeSeriesOutput</returns>
        </member>
        <member name="M:Web.Services.Models.AQTStreamHydrology.GetValidJsonExampleFile">
            <summary>
            Returns the json example file for AQUATOX Stream Hydrology.
            </summary>
            <returns>byte[]</returns>
        </member>
        <member name="M:Web.Services.Models.AQTStreamHydrology.GetValidJsonExampleString">
            <summary>
            Returns the json as a string from valid text file.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Web.Services.Models.WSAquatoxWorkflow">
            <summary>
            Web.Services model class for running an Aquatox simulation.
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxWorkflow.Run(System.String,System.String@,System.String@)">
            <summary>
            Gets output from upstream segments from mongodb and merges them to
            the input of the current segment simulation.
            </summary>
            <param name="task_id">Task ID of current simulation in database.</param>
            <param name="json">Stringified sim output.</param>
            <param name="errormsg">Error message or empty string.</param>
            <returns>Serialized json string of the AQUATOX simulation output.</returns>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxWorkflow.GetCurrentSim(System.String)">
            <summary>
            Using the given task ID, get the simulation json, upstream dictionary, and dependencies dictionary
            from the mongodb. 
            </summary>
            <param name="task_id">Task ID for current simulation in database.</param>
            <returns>Error message or empty string</returns>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxWorkflow.CheckDependencies(AQUATOX.AQTSegment.AQTSim)">
            <summary>
             Iterates over dictionary of dependencies and performs the appropriate action.
            </summary>
            <param name="sim">Current segment simulation</param>
            <returns>Error message or empty string</returns>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxWorkflow.ConvertUpstreamToInt(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Iterate over each comid and convert to int.
            </summary>
            <param name="upstream">List of comids as strings</param>
            <param name="comids">List of comids converted to ints</param>
            <returns>Error message or empty string</returns>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxWorkflow.Pass_Data(AQUATOX.AQTSegment.AQTSim,System.Collections.Generic.List{System.String})">
            <summary>
            Auxiliary function to mimic how data is passed in AQSim_2D.executeModel()
            </summary>
            <param name="sim">The current simulation to pass data to.</param>
            <param name="comids">List of comids</param>
        </member>
        <member name="T:Web.Services.Models.WSAquatoxWorkflow.ConvertedArchive">
            <summary>
            Class that has the archived state variable data converted to a dictionary
            of strings and values.
            </summary>
        </member>
        <member name="F:Web.Services.Models.WSAquatoxWorkflow.ConvertedArchive.Data">
            Dictionary of State Variables and associated values.
            g/m3 or mg/m3 depending on state var
            ex: { "Total Ammonia as N (mg/L)" : [0.08408, 0.0480355, ...] }
        </member>
        <member name="M:Web.Services.Models.WSAquatoxWorkflow.ArchiveOutput(System.String,System.String@)">
            <summary>
            Gets the output from database given a task ID and returns the archived results.
            </summary>
            <param name="task_id">Task ID in database.</param>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxWorkflow.ArchiveUpstreamOutputs(System.Collections.Generic.List{System.String})">
            <summary>
            Iterate over each comid and generate the archive results for each.
            </summary>
            <param name="comids">List of comids</param>
            <returns>Error message or empty string</returns>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxWorkflow.ConvertArchive(AQUATOX.AQTSegment.AQTSim)">
            <summary>   
            Convert the archived results to a dictionary
            </summary>
            <param name="sim">Current segment simulation</param>
            <returns>Converted archive</returns>
        </member>
        <member name="M:Web.Services.Models.WSAquatoxWorkflow.CheckForErrors(System.String)">
            <summary>
            Utility function to check for error by API controller.
            </summary>
            <param name="errorMsg">Error message</param>
            <returns>ITimeSeriesOutput with error</returns>
        </member>
        <member name="T:Web.Services.Models.WSCatchment">
            <summary>
            HMS Web Service Catchment Model
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSCatchment.Get(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets catchment data for a provided comid
            </summary>
            <param name="comid"></param>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Models.WSCoastal">
            <summary>
            Web Services Model object class for all Coastal requests.
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSCoastal.GetCoastal(Data.TimeSeriesInput)">
            <summary>
            Gets coastal data using the given TimeSeriesInput parameters.
            </summary>
            <param name="input">ITimeSeriesInput</param>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Models.WSContaminantLoader">
            <summary>
            HMS Web Service ContaminantLoader Model
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSContaminantLoader.LoadContaminant(Web.Services.Controllers.ContaminantLoaderInput)">
            <summary>
            Gets pressure data using the given TimeSeriesInput parameters.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Models.WSDewPoint">
            <summary>
            HMS Web Service Dew Point Model
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSDewPoint.GetDewPoint(Web.Services.Controllers.DewPointInput)">
            <summary>
            Gets dew point temperature data using the given TimeSeriesInput parameters.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Models.WSEvapotranspiration">
            <summary>
            HMS Web Service Evapotranspiration Model
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSEvapotranspiration.GetEvapotranspiration(Web.Services.Controllers.EvapotranspirationInput)">
            <summary>
            Gets Data Source evapotranspiration data (NLDAS, GLDAS) using the given TimeSeriesInput parameters.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Models.WSHawqs">
            <summary>
            HMS Web Service Radiation Model
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSHawqs.GetProjectInputDefinitions">
            <summary>
            Gets project input definitions.
            </summary>
            <returns>JSON string</returns>
        </member>
        <member name="M:Web.Services.Models.WSHawqs.SubmitProject(System.String,System.String)">
            <summary>
            Submits a new HAWQS project.
            </summary>
            <returns>JSON string</returns>
        </member>
        <member name="M:Web.Services.Models.WSHawqs.GetProjectStatus(System.String,System.String)">
            <summary>
            Gets project status.
            </summary>
            <returns>JSON string</returns>
        </member>
        <member name="M:Web.Services.Models.WSHawqs.GetProjectData(System.String,System.String,System.Boolean)">
            <summary>
            Gets conpleted project data file urls.
            </summary>
            <returns>JSON string</returns>
        </member>
        <member name="M:Web.Services.Models.WSHawqs.CancelProjectExecution(System.String,System.String)">
            <summary>
            Cancels submitted project execution.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Models.WSHumidity">
            <summary>
            HMS Web Service Humidity Model
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSHumidity.GetHumidity(Web.Services.Controllers.HumidityInput)">
            <summary>
            Gets humidty data using the given TimeSeriesInput parameters.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Models.Result">
            <summary>
            Result structure of the json string retrieved from ncei.
            </summary>
        </member>
        <member name="T:Web.Services.Models.ResultString">
            <summary>
            Result structure of the json string retrieved from ncei.
            </summary>
        </member>
        <member name="T:Web.Services.Models.ResultData">
            <summary>
            ResultData structure of the json string retrieved from ncei.
            </summary>
        </member>
        <member name="T:Web.Services.Models.StationData">
            <summary>
            StationData structure of the json string retrieved from ncei.
            </summary>
        </member>
        <member name="T:Web.Services.Models.WSPrecipCompare">
            <summary>
            HMS Web Service PrecipCompare Model
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSPrecipCompare.GetPrecipCompareData(Web.Services.Controllers.PrecipitationCompareInput)">
            <summary>
            Gets workflow data.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Models.WSPrecipExtraction">
            <summary>
            HMS Web Serivce WorkFlow Model
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSPrecipExtraction.GetWorkFlowData(Web.Services.Controllers.PrecipitationExtractionInput)">
            <summary>
            Gets workflow data.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Models.WSPrecipitation">
            <summary>
            HMS Web Service S Model
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSPrecipitation.GetPrecipitation(Web.Services.Controllers.PrecipitationInput)">
            <summary>
            Gets precipitation data using the given TimeSeriesInput parameters.
            </summary>
            <param name="input">ITimeSeriesInput</param>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Models.WSPressure">
            <summary>
            HMS Web Service Pressure Model
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSPressure.GetPressure(Web.Services.Controllers.PressureInput)">
            <summary>
            Gets pressure data using the given TimeSeriesInput parameters.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Models.WSRadiation">
            <summary>
            HMS Web Service Radiation Model
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSRadiation.GetRadiation(Web.Services.Controllers.RadiationInput)">
            <summary>
            Gets radiation data using the given TimeSeriesInput parameters.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Models.WSSoilMoisture">
            <summary>
            HMS Web Service SoilMoisture Model
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSSoilMoisture.GetSoilMoisture(Web.Services.Controllers.SoilMoistureInput)">
            <summary>
            Gets SoilMoisture data using the given TimeSeriesInput parameters.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Models.SolarCalculatorInput">
            <summary>
            Solar Calculator Input object
            </summary>
        </member>
        <member name="P:Web.Services.Models.SolarCalculatorInput.Model">
            <summary>
            Calculator model: 'Day' or 'Year'
            </summary>
        </member>
        <member name="P:Web.Services.Models.SolarCalculatorInput.LocalTime">
            <summary>
            Calculation localtime for when model='year', default='12:00:00'
            </summary>
        </member>
        <member name="T:Web.Services.Models.WSSolar">
            <summary>
            Model for the WSSolar controller
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSSolar.GetGCSolarDefaultInput">
            <summary>
            Calls into the Solar module and gets the default input data,
            equivlanet to selectin the first option from the windows start form.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Web.Services.Models.WSSolar.GetGCSolarOutput">
            <summary>
            Calls into the Solar module and gets the default data, 
            equivalent to selecting the third option from the windows start form.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Web.Services.Models.WSSolar.GetGCSolarOutput(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calls into the Solar module and sets the Common variables using the input object and returns the data based on those inputs.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Web.Services.Models.WSSolar.GetMetadata">
            <summary>
            Constructs input metadata for GCSolar module.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Web.Services.Models.WSSolar.RunSolarCalculator(Web.Services.Models.SolarCalculatorInput)">
            <summary>
            Model for accessing NOAA Solar Calculator 
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Models.WSStream">
            <summary>
            HMS Web Service Stream Model
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSStream.Get(System.String,System.String,System.String,System.Double,System.Boolean)">
            <summary>
            Gets stream network data for a provided comid
            </summary>
            <param name="comid"></param>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Models.WSStreamflow">
            <summary>
            HMS Web Service Streamflow Model
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSStreamflow.GetStreamflow(Data.ITimeSeriesInput)">
            <summary>
            Gets streamflow data using the given TimeSeriesInput parameters.
            </summary>
            <param name="input">ITimeSeriesInput</param>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Models.WSSubSurfaceFlow">
            <summary>
            HMS Web Service SubSurfaceFlow Model
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSSubSurfaceFlow.GetSubSurfaceFlow(Web.Services.Controllers.SubSurfaceFlowInput)">
            <summary>
            Gets subsurfaceflow data using the given TimeSeriesInput parameters.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Web.Services.Models.WSSubSurfaceFlow.SpatiallyWeightedAverage(Data.ITimeSeriesInput)">
            <summary>
            Calculates spatially weighted average for sub-surface runoff over a specified catchment comID
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Models.WSSurfaceRunoff">
            <summary>
            HMS Web Service SurfaceRunoff Model
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSSurfaceRunoff.GetSurfaceRunoff(Web.Services.Controllers.SurfaceRunoffInput)">
            <summary>
            Gets SurfaceRunoff data using the given TimeSeriesInput parameters.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Web.Services.Models.WSSurfaceRunoff.SpatiallyWeightedAverage(Data.ITimeSeriesInput)">
            <summary>
            Calculates spatially weighted average for surface runoff over a specified catchment comID
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Models.WSTemperature">
            <summary>
            HMS Web Service Temperature Model
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSTemperature.GetTemperature(Data.ITimeSeriesInput)">
            <summary>
            Gets temperature data using the given TimeSeriesInput parameters.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Models.TotalFlowInput">
            <summary>
            Input class for Total Flow (subsurface flow and surface flow)
            </summary>
        </member>
        <member name="P:Web.Services.Models.TotalFlowInput.GeometryType">
            <summary>
            Specifies the type of geometry provided
            Valid values: "huc", "commid", "catchmentid", "catchment", "flowline", "points"
            </summary>
        </member>
        <member name="P:Web.Services.Models.TotalFlowInput.GeometryInput">
            <summary>
            Contains the geometry data, type specified by geometry Type. 
            Valid formats are: an ID for type huc, commid, and catchmentid; geojson for types catchment and flowline; and points for type points
            </summary>
        </member>
        <member name="P:Web.Services.Models.TotalFlowInput.GeometryInputs">
            <summary>
            Contains the type as key and input as value, used when multiple inputs are needed for a request
            </summary>
        </member>
        <member name="T:Web.Services.Models.GeometryResponse">
            <summary>
            Response from HMS-GIS
            </summary>
        </member>
        <member name="T:Web.Services.Models.GeometryData">
            <summary>
            Response from HMS-GIS
            </summary>
        </member>
        <member name="P:Web.Services.Models.GeometryData.geometry">
            <summary>
            Geometry component of HMS-GIS response
            </summary>
        </member>
        <member name="P:Web.Services.Models.GeometryData.metadata">
            <summary>
            Metadata component of HMS-GIS response
            </summary>
        </member>
        <member name="T:Web.Services.Models.Catchment">
            <summary>
            Catchments
            </summary>
        </member>
        <member name="P:Web.Services.Models.Catchment.points">
            <summary>
            List of points in the Catchment
            </summary>
        </member>
        <member name="T:Web.Services.Models.Point">
            <summary>
            Catchment point data
            </summary>
        </member>
        <member name="P:Web.Services.Models.Point.latitude">
            <summary>
            Latitude of centroid
            </summary>
        </member>
        <member name="P:Web.Services.Models.Point.longitude">
            <summary>
            Longitude of centroid
            </summary>
        </member>
        <member name="P:Web.Services.Models.Point.cellArea">
            <summary>
            Total cell area
            </summary>
        </member>
        <member name="P:Web.Services.Models.Point.containedArea">
            <summary>
            Cell area that intersects the catchment
            </summary>
        </member>
        <member name="P:Web.Services.Models.Point.percentArea">
            <summary>
            Percent coverage of the intersection
            </summary>
        </member>
        <member name="T:Web.Services.Models.GeometryPoint">
            <summary>
            Point object
            </summary>
        </member>
        <member name="P:Web.Services.Models.GeometryPoint.Latitude">
            <summary>
            Point latitude
            </summary>
        </member>
        <member name="P:Web.Services.Models.GeometryPoint.Longitude">
            <summary>
            Point longitude
            </summary>
        </member>
        <member name="T:Web.Services.Models.WSTotalFlow">
            <summary>
            Model for Total Flow controller
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSTotalFlow.GetTotalFlowData(Web.Services.Models.TotalFlowInput)">
            <summary>
            Default function for retrieving Total Flow data
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Web.Services.Models.WSTotalFlow.RequestData(System.String)">
            <summary>
            Using the received taskID, the function long-polls the server until the max requests is reached or the status returns success.
            </summary>
            <param name="taskID"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Models.WSUtilities">
            <summary>
            Web Service Utilities Class
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSUtilities.ServiceCheck">
            <summary>
            Checks the external data endpoints
            </summary>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Models.WSWaterQuality">
            <summary>
            HMS Web Service Water Quality Model
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSWaterQuality.GetWaterQualityData(Web.Services.Controllers.WaterQualityInput)">
            <summary>
            Gets water quality data using the given TimeSeriesInput parameters.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Web.Services.Models.WSWatershedDelineation.GetDelineationData(Web.Services.Controllers.WatershedDelineationInput)">
            <summary>
            Gets workflow data.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Models.WSWatershedWorkFlow">
            <summary>
            HMS Web Serivce WorkFlow Model
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSWatershedWorkFlow.GetWorkFlowData(Web.Services.Controllers.WatershedWorkflowInput)">
            <summary>
            Gets workflow data.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Models.WSWind">
            <summary>
            HMS Web Service Wind Model
            </summary>
        </member>
        <member name="M:Web.Services.Models.WSWind.GetWind(Web.Services.Controllers.WindInput)">
            <summary>
            Gets wind data using the given TimeSeriesInput parameters.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Program">
            <summary>
            Program class
            </summary>
        </member>
        <member name="M:Web.Services.Program.Main(System.String[])">
            <summary>
            Web Services Main method
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Web.Services.Program.BuildWebHost(System.String[])">
            <summary>
            Web Services build Web host method
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Web.Services.Startup">
            <summary>
            Web Services Startup Class
            </summary>
        </member>
        <member name="M:Web.Services.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure services function
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Web.Services.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Configure function
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <param name="loggerFactory"></param>
        </member>
    </members>
</doc>
